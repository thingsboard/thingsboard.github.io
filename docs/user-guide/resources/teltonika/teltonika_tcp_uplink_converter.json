{
  "name": "TCP_UPLINK",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "decoder": "    var constants = {\n        'priority':\n            {\n                0: \"Low\",\n                1: \"High\",\n                2: \"Panic\",\n                3: \"Security\"\n            },\n        'idIo':\n            {\n                0: \"00000\",\n                1: \"Digital Input 1\",\n                2: \"00002\",\n                3: \"00003\",\n                4: \"Pulse Counter DIN1\",\n                5: \"00005\",\n                6: \"00006\",\n                7: \"00007\",\n                8: \"00008\",\n                9: \"Analog Input 1\",\n                10: \"00010\",\n                11: \"ICCID1\",\n                12: \"FC By GPS (ml)\",\n                13: \"FC AVG By GPS (l/h*100)\",\n                14: \"ICCID4\",\n                15: \"Eco score\",\n                16: \"Total Odometr (m)\",\n                17: \"Axis X (mG)\",\n                18: \"Axis Y (mG)\",\n                19: \"Axis Z (mG)\",\n                20: \"BLE Battery #2 (%)\",\n                21: {\n                    \"GSM Signal\":\n                        {\n                            0: \"00\",\n                            1: \"01\",\n                            2: \"02\",\n                            3: \"03\",\n                            4: \"Good Signal\",\n                            5: \"Excellent Signal\"\n                        }\n                },\n                22: \"BLE Battery #3 (%)\",\n                23: \"BLE Battery #4 (%)\",\n                24: \"Speed km/h\",\n                25: \"BLE Temp #1 (C)\",\n                26: \"BLE Temp #2 (C)\",\n                27: \"BLE Temp #3 (C)\",\n                28: \"BLE Temp #4 (C)\",\n                29: \"BLE Battery #1 (%)\",\n                30: \"00030\",\n                31: \"00031\",\n                32: \"00032\",\n                33: \"00033\",\n                34: \"00034\",\n                35: \"00035\",\n                36: \"00036\",\n                37: \"00037\",\n                38: \"00038\",\n                39: \"00039\",\n                40: \"00040\",\n                41: \"00041\",\n                42: \"00042\",\n                43: \"00043\",\n                44: \"00044\",\n                45: \"00045\",\n                46: \"00046\",\n                47: \"00047\",\n                48: \"00048\",\n                49: \"00049\",\n                50: \"00050\",\n                51: \"00051\",\n                52: \"00052\",\n                53: \"00053\",\n                54: \"00054\",\n                55: \"00055\",\n                56: \"00056\",\n                57: \"00057\",\n                58: \"00058\",\n                59: \"00059\",\n                60: \"00060\",\n                61: \"00061\",\n                62: \"00062\",\n                63: \"00063\",\n                64: \"00064\",\n                65: \"00065\",\n                66: \"External Voltage mV\",\n                67: \"Battery Voltage mV\",\n                68: \"Battery Current mA\",\n                69: {\n                    \"GNSS Status\":\n                        {\n                            0: \"00\",\n                            1: \"01\",\n                            2: \"Activated\",\n                            3: \"03\"\n                        }\n                },\n                70: \"00070\",\n                71: \"00071\",\n                72: \"00072\",\n                73: \"00073\",\n                74: \"00074\",\n                75: \"00075\",\n                76: \"00076\",\n                77: \"00077\",\n                78: \"00078\",\n                79: \"00079\",\n                80: \"Data Mode\",\n                81: \"00081\",\n                82: \"00082\",\n                83: \"00083\",\n                84: \"00084\",\n                85: \"00085\",\n                86: \"BLE Humidity #1 (%RH)\",\n                87: \"00087\",\n                88: \"00088\",\n                89: \"00089\",\n                90: \"00090\",\n                91: \"00091\",\n                92: \"00092\",\n                93: \"00093\",\n                94: \"00094\",\n                95: \"00095\",\n                96: \"00096\",\n                97: \"00097\",\n                98: \"00098\",\n                99: \"00099\",\n                100: \"00100\",\n                101: \"00101\",\n                102: \"00102\",\n                103: \"00103\",\n                104: \"BLE Humidity #2 (%RH)\",\n                105: \"00105\",\n                106: \"BLE Humidity #3 (%RH)\",\n                107: \"00107\",\n                108: \"BLE Humidity #4 (%RH)\",\n                109: \"00109\",\n                110: \"00110\",\n                111: \"00111\",\n                112: \"00112\",\n                113: \"Internel Battery Status %\",\n                114: \"00114\",\n                115: \"00115\",\n                116: \"00116\",\n                117: \"00117\",\n                118: \"00118\",\n                119: \"00119\",\n                120: \"00120\",\n                121: \"00121\",\n                122: \"00122\",\n                123: \"00123\",\n                124: \"00124\",\n                125: \"00125\",\n                126: \"00126\",\n                127: \"00127\",\n                128: \"00128\",\n                129: \"00129\",\n                130: \"00130\",\n                131: \"00131\",\n                132: \"00132\",\n                133: \"00133\",\n                134: \"00134\",\n                135: \"00135\",\n                136: \"00136\",\n                137: \"00137\",\n                138: \"00138\",\n                139: \"00139\",\n                140: \"00140\",\n                141: \"00141\",\n                142: \"00142\",\n                143: \"00143\",\n                144: \"00144\",\n                145: \"00145\",\n                146: \"00146\",\n                147: \"00147\",\n                148: \"00148\",\n                149: \"00149\",\n                150: \"00150\",\n                151: \"00151\",\n                152: \"00152\",\n                153: \"00153\",\n                154: \"00154\",\n                155: \"00155\",\n                156: \"00156\",\n                157: \"00157\",\n                158: \"00158\",\n                159: \"00159\",\n                160: \"00160\",\n                161: \"00161\",\n                162: \"00162\",\n                163: \"00163\",\n                164: \"00164\",\n                165: \"00165\",\n                166: \"00166\",\n                167: \"00167\",\n                168: \"00168\",\n                169: \"00169\",\n                170: \"00170\",\n                171: \"00171\",\n                172: \"00172\",\n                173: \"00173\",\n                174: \"00174\",\n                175: \"00175\",\n                176: \"00176\",\n                177: \"00177\",\n                178: \"00178\",\n                179: \"Digital Output 1\",\n                180: \"00180\",\n                181: \"GNSS PDOP\",\n                182: \"GNSS NDOP\",\n                183: \"00183\",\n                184: \"00184\",\n                185: \"00185\",\n                186: \"00186\",\n                187: \"00187\",\n                188: \"00188\",\n                189: \"00189\",\n                190: \"00190\",\n                191: \"00191\",\n                192: \"00192\",\n                193: \"00193\",\n                194: \"00194\",\n                195: \"00195\",\n                196: \"00196\",\n                197: \"00197\",\n                198: \"00198\",\n                199: \"Trip Odometr (m)\",\n                200: \"Sllep Mode\",\n                201: \"00201\",\n                202: \"00202\",\n                203: \"00203\",\n                204: \"00204\",\n                205: \"GSM Cell ID\",\n                206: \"GSM Area Code\",\n                207: \"00207\",\n                208: \"00208\",\n                209: \"00209\",\n                210: \"00210\",\n                211: \"00211\",\n                212: \"00212\",\n                213: \"00123\",\n                214: \"00124\",\n                215: \"00125\",\n                216: \"00126\",\n                217: \"00217\",\n                218: \"00218\",\n                219: \"00219\",\n                220: \"00220\",\n                221: \"00221\",\n                222: \"00222\",\n                223: \"00223\",\n                224: \"00224\",\n                225: \"00225\",\n                226: \"00226\",\n                227: \"00227\",\n                228: \"00228\",\n                229: \"00229\",\n                230: \"00230\",\n                231: \"00231\",\n                232: \"00232\",\n                233: \"00233\",\n                234: \"00234\",\n                235: \"00235\",\n                236: \"00236\",\n                237: \"00237\",\n                238: \"User ID\",\n                239: \"Ignition\",\n                240: \"Movement\",\n                241: \"Actual Operator Code\",\n                242: \"00242\",\n                243: \"00243\",\n                244: \"00244\",\n                245: \"00245\",\n                246: \"00246\",\n                247: \"00247\",\n                248: \"00248\",\n                249: \"00249\",\n                250: \"00250\",\n                251: \"00251\",\n                252: \"00252\",\n                253: \"00253\",\n                254: \"00254\",\n                255: \"00255\",\n                256: \"00256\",\n                257: \"00257\",\n                258: \"00258\",\n                259: \"00259\",\n                260: \"00260\",\n                261: \"00261\",\n                262: \"00262\",\n                263: \"00263\",\n                264: \"00264\",\n                265: \"00265\",\n                266: \"00266\",\n                267: \"00267\",\n                268: \"00268\",\n                269: \"00269\",\n                270: \"00270\",\n                271: \"00271\",\n                272: \"00272\",\n                273: \"00273\",\n                274: \"00274\",\n                275: \"00275\",\n                276: \"00276\",\n                277: \"00277\",\n                278: \"00278\",\n                279: \"00279\",\n                280: \"00280\",\n                281: \"00281\",\n                282: \"00282\",\n                283: \"00283\",\n                284: \"00284\",\n                285: \"00285\",\n                286: \"00286\",\n                287: \"00287\",\n                288: \"00288\",\n                289: \"00289\",\n                290: \"00290\",\n                291: \"00291\",\n                292: \"00292\",\n                293: \"00293\",\n                294: \"00294\",\n                295: \"00295\",\n                296: \"00296\",\n                297: \"00297\",\n                298: \"00298\",\n                299: \"00299\"\n\n\n            }\n    };\n\n    var payoadStr = decodeToJson(payload);\n    var y = 0;\n    var lenByte = 2;\n    var deviceName = getNameDevice('FMB920_');\n    var deviceType = 'teltonik';\n    var deviceModel = 'FMB920';\n    var request = \"Downlink\";\n    var response = \"Uplink\";\n\n    var result = setPayload();\n\n    function setPayload() {\n        if (payoadStr !== null && payoadStr.length > 0 && metadata.hasOwnProperty('imei')) {\n            return getPayload();\n        }\n        return null;\n    }\n\n    function getPayload() {\n        var codec = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        var rez = {\n            deviceName: deviceName,\n            deviceType: deviceType,\n            attributes: {\n                model: deviceModel,\n                serialNumber: metadata.imei,\n                integrationName: metadata.integrationName,\n                codec: codec\n            },\n            telemetry: getTelemetry(codec)\n        };\n        return rez;\n    }\n\n    function getTelemetry(codec) {\n        if (codec === 8) {\n            return getTelemetry08();\n        } else if (codec === 12) {\n            return getTelemetry12();\n        }\n        else if (codec === 22) {\n            return getTelemetry22();\n        }\n    }\n\n\n    function getTelemetry08() {\n        var telemetry = [];\n        // var numberData1 = parseInt(payoadStr.substr(y, lenByte), 16);\n        var numberData1 = 1;\n        y += lenByte;\n        for (var i = 0; i < numberData1; i++) {\n            var len = 16;\n            var timeMS = parseInt(payoadStr.substr(y, len), 16);\n            y += len;\n            var avlData = {\n                ts: timeMS,\n                values: getAVLData()\n            };\n\n            telemetry.push(avlData);\n        }\n        var ts = new Date().getTime();\n        var maxLenth = 400;\n        var telemtryStr = JSON.stringify(telemetry[0]);\n        if (telemtryStr.length> maxLenth) telemtryStr = telemtryStr.substring(0, maxLenth) + \"...\";\n        var logs = {\n            ts: ts,\n            values: {\n                \"logs\": request + \": 1 \" + response + \": \" + telemtryStr\n            }\n        };\n\n\n        telemetry.push(logs);\n\n        return telemetry;\n    }\n\n    function getTelemetry12() {\n        var telemetry = [];\n        var quantity = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        var type = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        var ts = new Date().getTime();\n        var responseData = {\n            ts: ts,\n            values: getResponse()\n        };\n        telemetry.push(responseData);\n        return telemetry;\n    }\n\n\n    function getTelemetry22() {\n        var telemetry = [];\n        var ts = new Date().getTime();\n        var responseData = {\n            ts: ts,\n            values: {\n                \"logs\":  metadata[\"request\"]  + \": \" + payoadStr.substr(y)\n            }\n        };\n        telemetry.push(responseData);\n        return telemetry;\n    }\n\n    function getAVLData() {\n        var priority = constants.priority[parseInt(payoadStr.substr(y, lenByte), 16)];\n        y += lenByte;\n        len = 30;\n        var gpsElementStr = payoadStr.substr(y, len);\n        y += len;\n        var avlData = {\n            priority: priority,\n            longitude: getLatLongToStr(gpsElementStr.substr(0, 8)),\n            latitude: getLatLongToStr(gpsElementStr.substr(8, 8)),\n            altitude: parseInt(gpsElementStr.substr(16, 4), 16),\n            angle: parseInt(gpsElementStr.substr(20, 4), 16),\n            satellites: parseInt(gpsElementStr.substr(24, 2), 16),\n            speed: parseInt(gpsElementStr.substr(26, 4), 16)\n        };\n        addIoElement(avlData);\n        return avlData;\n    }\n\n    function getLatLongToStr(str) {\n        var strInt = parseInt(str, 16);\n        var strVal = strInt.toString();\n        return strInt > 0 ? strVal.substring(0, 2) + \".\" + strVal.substring(2) : strVal;\n    }\n\n\n    function getResponse() {\n        var len = 8;\n        var responseSize = parseInt(payoadStr.substr(y, len), 16);\n        y += len;\n        len = 2 * responseSize;\n        var responseValHex = payoadStr.substr(y, len);\n        y += len;\n        var key = metadata[\"request\"];\n        var resposeValAnsii = hex_to_ascii(responseValHex);\n        var result = {\n            \"logs\": request + \": \" + metadata[\"request\"] + \" \" + response + \": \" + resposeValAnsii\n        };\n        return result;\n    }\n\n    function getNameDevice(deviceName) {\n        if (metadata.hasOwnProperty('imei')) {\n            return deviceName + metadata['imei'];\n        } else {\n            return deviceName;\n        }\n    }\n\n    function addIoElement(avlData) {\n        avlData.eventIoId = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        var totalIo = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        var oneByteIo = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        if (oneByteIo > 0) {\n            getByteIo(avlData, oneByteIo, 2);\n        }\n        var twoByteIo = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        if (twoByteIo > 0) {\n            getByteIo(avlData, twoByteIo, 4);\n        }\n        var forByteIo = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        if (forByteIo > 0) {\n            getByteIo(avlData, forByteIo, 8);\n        }\n        var eightByteIo = parseInt(payoadStr.substr(y, lenByte), 16);\n        y += lenByte;\n        if (eightByteIo > 0) {\n            getByteIo(avlData, eightByteIo, 16);\n        }\n    }\n\n    function getByteIo(avlData, cnt, lenB) {\n        var nameIoId;\n        var val;\n        for (var i = 0; i < cnt * 2; i += 2) {\n            var ioId = parseInt(payoadStr.substr(y, lenByte), 16);\n            if (constants.idIo[ioId] instanceof Object) {\n                for (var key in constants.idIo[ioId]) {\n                    nameIoId = key;\n                    y += lenByte;\n                    val = constants.idIo[ioId][key][parseInt(payoadStr.substr(y, lenB), 16)];\n                    y += lenB;\n                }\n            } else {\n                nameIoId = constants.idIo[ioId];\n                y += lenByte;\n                val = hexToInt(payoadStr.substr(y, lenB));\n                y += lenB;\n            }\n            avlData[nameIoId] = val;\n        }\n    }\n\n    function hexToInt(hex) {\n        if (hex.length % 2 !== 0) {\n            hex = \"0\" + hex;\n        }\n        var num = parseInt(hex, 16);\n        var maxVal = Math.pow(2, hex.length / 2 * 8);\n        if (num > maxVal / 2 - 1) {\n            num = num - maxVal\n        }\n        return num;\n    }\n\n    function decodeToJson(payoadStr) {\n        try {\n            return JSON.parse(String.fromCharCode.apply(String, payoadStr));\n        } catch (e) {\n            return JSON.parse(JSON.stringify(payoadStr));\n        }\n    }\n\n    function hex_to_ascii(str1) {\n        var hex = str1.toString();\n        var str = '';\n        for (var n = 0; n < hex.length; n += 2) {\n            str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n        }\n        return str;\n    }\n\n    return result;"
  },
  "additionalInfo": null
}