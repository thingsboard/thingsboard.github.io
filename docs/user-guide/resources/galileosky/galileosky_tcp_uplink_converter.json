{
  "name": "TCP_GALILEOSKY_UPLINK",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "decoder": "    var constants = {\n        'tag':\n            {\n                \"00\": {\n                    \"type\": 1,          // attributes\n                    \"name\": \"Unsent data\",\n                    \"len\": 1,\n                    \"value\": {\n                        0: \"no\",\n                        1: \"yes\"\n                    }\n                },\n                \"01\": {\n                    \"type\": 1,\n                    \"name\": \"Hardware version\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                    // \"value\": {\n                    //     1: \"DataCOLD 500\",\n                    //     2: \"ThermoKing iBox\",\n                    //     3: \"EuroScan\",\n                    //     4: \"Carrier Gateway\",\n                    //     5: \"DataCOLD600\",\n                    //     7: \"iQFreeze: ThermoKing v. SLX\",\n                    //     8: \"iQFreeze: Carrier Standard32\",\n                    //     9: \"iQFreeze: Zanotti\",\n                    //     10: \"iQFreeze: ThermalMaster\",\n                    //     11: \"iQFreeze: Carrier NDP33LN6F\",\n                    //     12: \"iQFreeze Mitsubishi\",\n                    //     13: \"ThermoKing TouchPrint\",\n                    //     14: \"iQFreeze Carrier Vector 1350\",\n                    //     15: \"iQFreeze ThermoKing TGVI\",\n                    //     16: \"iQFreeze Carrier XARIOS\",\n                    //     17: \"Galileosky GPS/GLONASS 5.0.11\"\n                    // }\n                },\n                \"02\": {\n                    \"type\": 1,\n                    \"name\": \"Firmware version\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"03\": {\n                    \"type\": 1,\n                    \"name\": \"IMEI\",\n                    \"len\": 15,\n                    \"valueType\": \"String\"\n                },\n                \"04\": {\n                    \"type\": 1,\n                    \"name\": \"Device number\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"10\": {\n                    \"type\": 2,                      // telemetry\n                    \"name\": \"Number of an archive record\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"20\": {\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getDateTimeResponse,\n                    \"functionValue\": {\n                        1: \"Date and time (ms)\",\n                        2: \"Date and time\"\n                    }\n                },\n                \"30\": {\n                    \"type\": 2,\n                    \"len\": 9,\n                    \"valueType\": \"function\",\n                    \"function\": getCoordinates,\n                    \"functionValue\": {\n                        \"0_0_3\": \"Number of satellites\",\n                        \"0_4_7\": {\n                            \"name\": \"Coordinates source\",\n                            0: \"GLONASS/GPS module is a source\",\n                            2: \"Cellular base stations are a source\",\n                            3: \"Coordinates are incorrect\"\n                        },\n                        \"1_4\": \"latitude\",\n                        \"5-9\": \"longitude\"\n                    }\n                },\n                \"33\": {\n                    \"type\": 2,\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getSpeed,\n                    \"functionValue\": {\n                        \"0_1\": \"Speed (km/h)\",\n                        \"2_3\": \"Direction in degrees\"\n                    }\n                },\n                \"34\": {\n                    \"type\": 2,\n                    \"name\": \"Height (m)\",\n                    \"len\": 2,\n                    \"valueType\": \"Signed integer\"\n                },\n                \"35\": {\n                    \"type\": 2,\n                    \"name\": \"Position error\",\n                    \"len\": 1,\n                    \"valueType\": \"function\",\n                    \"function\": getPositioningError,\n                    \"functionValue\": {\n                        0: \"HDOP\",\n                        2: \"Base stations (m)\",\n                        3: \"Coordinates are incorrect\"\n                    }\n                },\n                \"40\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getStatusDevice,\n                    \"functionValue\":\n                        {\n                            0: {\n                                \"name\": \"Status device: vibration level\",\n                                0: \"corresponds to parking\",\n                                1: \"corresponds to driving\"\n                            },\n                            1: {\n                                \"name\": \"Status device: incline angle\",\n                                0: \"does not exceed the allowable one\",\n                                1: \"exceeds the allowable one\"\n                            },\n                            2: {\n                                \"name\": \"Status device: iButton keys\",\n                                0: \"none of the trusted iButton keys are connected\",\n                                1: \"one of the recorded to the SD-card iButton keys is connected\"\n                            },\n                            3: {\n                                \"name\": \"Status device: SIM card\",\n                                0: \"there is a SIM card\",\n                                1: \"GSM-unit canâ€™t determine the SIM-card\"\n                            },\n                            4: {\n                                \"name\": \"Status device: tracking device\",\n                                0: \"is outside the geofence\",\n                                1: \"is inside the geofence\"\n                            },\n                            5: {\n                                \"name\": \"Status device: voltage of internal source\",\n                                0: \"is normal\",\n                                1: \"lower than 3.7 V\"\n                            },\n                            6: {\n                                \"name\": \"Status device: GPS aerial\",\n                                0: \"is connected\",\n                                1: \"disconnected\"\n                            },\n                            7: {\n                                \"name\": \"Status device: voltage of internal Tracking device bus supply\",\n                                0: \"is normal\",\n                                1: \"declined from normal\"\n                            },\n                            8: {\n                                \"name\": \"Status device: external supply voltage\",\n                                0: \"is normal\",\n                                1: \"declined from normal\"\n                            },\n                            9: {\n                                \"name\": \"Status device: vehicle\",\n                                0: \"is stopped\",\n                                1: \"is started\"\n                            },\n                            10: {\n                                \"name\": \"Status device: vehicle\",\n                                0: \"vibration level corresponds to the normal movement\",\n                                1: \"vibration level corresponds to a strike\"\n                            },\n                            11: {\n                                \"name\": \"Status device: coordinates are used\",\n                                0: \"built-in module\",                               // For devices with built-in GLONASS/GPS module:  0: \"built-in module\"\n                                1: \"external module\"                                // For devices with built-in GPS module (without GLONASS support):  0: \"external module\"\n                            },\n                            12: {\n                                \"name\": \"Status device: Signal quality\",\n                                \"bitNumber\": 12,\n                                \"len\": 2                                            // range: [0-3]. The less value, the worse communication.\n                            },\n                            14: {\n                                \"name\": \"Status device: signaling mode\",\n                                0: \"is off\",\n                                1: \"is on\"\n                            },\n                            15: {\n                                \"name\": \"Status device: alarm\",\n                                0: \"no alarm\",\n                                1: \"activated\"\n                            }\n                        }\n                },\n                \"41\": {\n                    \"type\": 2,\n                    \"name\": \"Supply voltage, mV\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"42\": {\n                    \"type\": 2,\n                    \"name\": \"Battery voltage (mV)\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"43\": {\n                    \"type\": 2,\n                    \"name\": \"Tracking device temperature (C)\",\n                    \"len\": 1,\n                    \"valueType\": \"Signed integer\"\n                },\n                \"44\": {\n                    \"type\": 2,\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getAcceleration,\n                    \"functionValue\": {\n                        0: {\n                            \"name\": \"Acceleration: by X axis\",\n                            \"bitNumber\": 0,\n                            \"len\": 10\n                        },\n                        1: {\n                            \"name\": \"Acceleration: by Y axis\",\n                            \"bitNumber\": 10,\n                            \"len\": 10\n                        },\n                        2: {\n                            \"name\": \"Acceleration: by Z axis\",\n                            \"bitNumber\": 20,\n                            \"len\": 10\n                        }\n                    }\n                },\n                \"45\": {\n                    \"type\": 2,\n                    \"name\": \"Status of outputs\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"46\": {\n                    \"type\": 2,\n                    \"name\": \"Status of inputs\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"47\": {\n                    \"type\": 2,\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getEcoDrive,\n                    \"functionValue\": {\n                        0: \"EcoDrive: acceleration (m/s2)\",\n                        1: \"EcoDrive: braking (m/s2)\",\n                        2: \"EcoDrive: cornering acceleration (m/s2)\",\n                        3: \"EcoDrive: strike on bump (m/s2)\"\n                    }\n                },\n                \"48\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getExpandedStatus,\n                    \"functionValue\": {\n                        0: {\n                            \"name\": \"Expanded status: state to the primary server\",\n                            \"bitNumber\": 0,\n                            \"len\": 1,\n                            0: \"not connected\",\n                            1: \"connected\"\n                        },\n                        1: {\n                            \"name\": \"Expanded status: GPRS session status\",\n                            \"bitNumber\": 1,\n                            \"len\": 1,\n                            0: \"off\",\n                            1: \"on\"\n                        },\n                        2: {\n                            \"name\": \"Expanded status: jamming detected\",\n                            \"bitNumber\": 2,\n                            \"len\": 1,\n                            0: \"no jamming detected\",\n                            1: \"GSM jamming detected\"\n                        }\n                    }\n                },\n                \"50\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 0\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"51\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 1\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"52\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 2\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"53\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 3\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"54\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 4\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"55\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 5\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"56\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 6\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"57\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 7\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"58\": {\n                    \"type\": 2,\n                    \"name\": \"RS232 0\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"59\": {\n                    \"type\": 2,\n                    \"name\": \"RS232 1\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"5A\": {\n                    \"type\": 2,\n                    \"name\": \"REP-500\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"5B\": {\n                    \"name\": \"Refrigeration unit data\",\n                    \"type\": 2,\n                    \"len\": 7,\n                    \"valueType\": \"function\",\n                    \"function\": getRefrigerationData,\n                    \"functionValue\": {\n                        1: {\n                            \"name\": \" (Type of unit)\",\n                            \"len\": 1,\n                            1: \"DataCOLD 500\",\n                            2: \"ThermoKing iBox\",\n                            3: \"EuroScan\",\n                            4: \"Carrier Gateway\",\n                            5: \"DataCOLD600\",\n                            7: \"ThermoKing v SLX\",\n                            8: \"Carrier Standard32\",\n                            9: \"iQFreeze: Zanotti\",\n                            10: \"ThermalMaster\",\n                            11: \"iQFreeze: Carrier NDP33LN6F\",\n                            12: \"iQFreeze Mitsubishi\",\n                            13: \"ThermoKing TouchPrint\",\n                            14: \"iQFreeze Carrier Vector 1350\",\n                            15: \"iQFreeze ThermoKing TGVI\",\n                            16: \"iQFreeze Carrier XARIOS\"\n                        },\n                        2: {\n                            \"name\": \" (Status): \",\n                            \"len\": 2,\n                            0: \"no connection with the unit\",\n                            1: \"setting of zone 1 is on\",\n                            2: \"setting of zone 2 is on\",\n                            3: \"setting of zone 3 is on\",\n                            4: \"temperature sensor 1 is available\",\n                            5: \"temperature sensor 2 is available\",\n                            6: \"temperature sensor 3 is available\",\n                            7: \"temperature sensor 4 is available\",\n                            8: \"temperature sensor 5 is available\",\n                            9: \"temperature sensor 6 is available\",\n                            10: \"Emergency field\",\n                            11: \"Hours up to maintenance field\",\n                            12: \"Operating hours field\",\n                            13: \"Requests failures field\",\n                            14: \"Engine speed field\"\n                        },\n                        4: {\n                            \"name\": \" (Digital input 1) \",\n                            \"len\": 1,\n                            0: \"input is on\",\n                            1: \"input state\",\n                            2: \"alarm\",\n                            3: {\n                                \"name\": \"input type\",\n                                \"len\": 5\n                            }\n                        },\n                        5: {\n                            \"name\": \" (Digital input 2) \",\n                            \"len\": 1,\n                            0: \"input is on\",\n                            1: \"input state\",\n                            2: \"alarm\",\n                            3: {\n                                \"name\": \"input type\",\n                                \"len\": 5\n                            }\n                        },\n                        6: {\n                            \"name\": \" (Digital input 3) \",\n                            \"len\": 1,\n                            0: \"input is on\",\n                            1: \"input state\",\n                            2: \"alarm\",\n                            3: {\n                                \"name\": \"input type\",\n                                \"len\": 5\n                            }\n                        },\n                        7: {\n                            \"name\": \" (Digital input 4) \",\n                            \"len\": 1,\n                            0: \"input is on\",\n                            1: \"input state\",\n                            2: \"alarm\",\n                            3: {\n                                \"name\": \"input type\",\n                                \"len\": 5\n                            }\n                        }\n                    }\n                },\n                \"5C\": {\n                    \"type\": 2,\n                    \"name\": \"PressurePro #\",\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getPressurePro,\n                    \"functionValue\": {\n                        0: \": tire pressure (ps)\",\n                        1: {\n                            0: {\n                                \"name\": \": temperature\",\n                                \"len\": 3\n                            },\n                            3: {\n                                0: \"is connected\",\n                                1: \"no connection\"\n                            },\n                            4: {\n                                \"name\": \": sensor battery\",\n                                1: \"low charge (error)\"\n                            },\n                            5: {\n                                \"name\": \": reason of data sending\",\n                                \"len\": 3,\n                                0: \"periodical sending\",\n                                1: \"pressure loss by 10%\",\n                                2: \"pressure loss by 20%\",\n                                3: \"pressure loss by 50% for TPMS\",\n                                4: \"high temperature for TPMS\",\n                                5: \"rapid pressure drop for TPMS\",\n                                6: \"tire is inflated again\"\n                            }\n                        }\n                    }\n                },\n                \"5D\": {\n                    \"type\": 2,\n                    \"name\": \"Dosimeter data (DBG-S11D): \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDosimeterData,\n                    \"functionValue\": {\n                        0: {\n                            \"name\": \" ADER 3V/h: \",\n                            \"len\": 2,\n                            0: {\n                                \"name\": \"order\",\n                                \"bitNumber\": 10,\n                                \"len\": 6\n\n                            },\n                            6: {\n                                \"name\": \"coefficient\",\n                                \"bitNumber\": 0,\n                                \"len\": 10\n                            }\n                        },\n                        2: {\n                            \"name\": \" dosimeter state: \",\n                            \"len\": 1,\n                            0: {\n                                \"name\": \"dose power value\",\n                                \"len\": 3,\n                                0: \"weighted average value is typed out via 2 channels\",\n                                1: \"channel 1 value is typed out\",\n                                2: \"channel 2 value is typed out\",\n                                5: \"false value is typed out (device in testingmode)\"\n                            },\n                            3: {\n                                \"name\": \" channel 1 state: \",\n                                0: \"is off\",\n                                1: \"is on\"\n                            },\n                            4: {\n                                \"name\": \" channel 1 state: \",\n                                0: \"OK\",\n                                1: \"failure\"\n                            },\n                            5: {\n                                \"name\": \" channel 2 state: \",\n                                0: \"is off\",\n                                1: \"is on\"\n                            },\n                            6: {\n                                \"name\": \" channel 2 state: \",\n                                0: \"OK\",\n                                1: \"failure\"\n                            },\n                            7: {\n                                \"name\": \" economy mode: \",\n                                0: \"is off\",\n                                1: \"is on\"\n                            }\n                        }\n                    }\n                },\n                \"60\": {\n                    \"type\": 2,\n                    \"name\": \"Fuel level sensor with address 0: relative fuel level\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"61\": {\n                    \"type\": 2,\n                    \"name\": \"Fuel level sensor with address 1: relative fuel level\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"62\": {\n                    \"type\": 2,\n                    \"name\": \"Fuel level sensor with address 2: relative fuel level\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"63\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 3: relative fuel level\",\n                        2: \"Fuel level sensor with address 3: temperature (Ð¡)\"\n                    }\n                },\n                \"64\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 4: relative fuel level\",\n                        2: \"Fuel level sensor with address 4: temperature (Ð¡)\"\n                    }\n                },\n                \"65\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 5: relative fuel level\",\n                        2: \"Fuel level sensor with address 5: temperature (Ð¡)\"\n                    }\n                },\n                \"66\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 6: relative fuel level\",\n                        2: \"Fuel level sensor with address 6: temperature (Ð¡)\"\n                    }\n                },\n                \"67\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 7: relative fuel level\",\n                        2: \"Fuel level sensor with address 7: temperature (Ð¡)\"\n                    }\n                },\n                \"68\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 8: relative fuel level\",\n                        2: \"Fuel level sensor with address 8: temperature (Ð¡)\"\n                    }\n                },\n                \"69\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 9: relative fuel level\",\n                        2: \"Fuel level sensor with address 9: temperature (Ð¡)\"\n                    }\n                },\n                \"6A\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 10: relative fuel level\",\n                        2: \"Fuel level sensor with address 10: temperature, Ð¡\"\n                    }\n                },\n                \"6B\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 11: relative fuel level\",\n                        2: \"Fuel level sensor with address 11: temperature (Ð¡)\"\n                    }\n                },\n                \"6C\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 12: relative fuel level\",\n                        2: \"Fuel level sensor with address 12: temperature, Ð¡\"\n                    }\n                },\n                \"6D\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 13: relative fuel level\",\n                        2: \"Fuel level sensor with address 13: temperature, Ð¡\"\n                    }\n                },\n                \"6E\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 14: relative fuel level\",\n                        2: \"Fuel level sensor with address 14: temperature, Ð¡\"\n                    }\n                },\n                \"6F\": {\n                    \"type\": 2,\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getFuelLevelSensor,\n                    \"functionValue\": {\n                        0: \"Fuel level sensor with address 15: relative fuel level\",\n                        2: \"Fuel level sensor with address 15: temperature, Ð¡\"\n                    }\n                },\n                \"70\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 0 identifier\",\n                        1: \"Thermometer 0 measured\"\n                    }\n                },\n                \"71\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 1 identifier\",\n                        1: \"Thermometer 1 measured\"\n                    }\n                },\n                \"72\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 2 identifier\",\n                        1: \"Thermometer 2 measured\"\n                    }\n                },\n                \"73\": {\n                    \"name\": \"RS232 1\",\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 3 identifier\",\n                        1: \"Thermometer 3 measured\"\n                    }\n                },\n                \"74\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 4 identifier\",\n                        1: \"Thermometer 4 measured\"\n                    }\n                },\n                \"75\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 5 identifier\",\n                        1: \"Thermometer 5 measured\"\n                    }\n                },\n                \"76\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 6 identifier\",\n                        1: \"Thermometer 6 measured\"\n                    }\n                },\n                \"77\": {\n                    \"type\": 2,\n                    \"len\": 2,\n                    \"valueType\": \"function\",\n                    \"function\": getThermometer,\n                    \"functionValue\": {\n                        0: \"Thermometer 7 identifier\",\n                        1: \"Thermometer 7 measured\"\n                    }\n                },\n                \"78\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 8\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"79\": {\n                    \"type\": 2,\n                    \"name\": \"Input voltage 9\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"80\": {\n                    \"type\": 2,\n                    \"name\": \"Zero DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"81\": {\n                    \"type\": 2,\n                    \"name\": \"The 1-st DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"82\": {\n                    \"type\": 2,\n                    \"name\": \"The 2-nd DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"83\": {\n                    \"type\": 2,\n                    \"name\": \"The 3-rd DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"84\": {\n                    \"type\": 2,\n                    \"name\": \"The 4-th DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"85\": {\n                    \"type\": 2,\n                    \"name\": \"The 5-th DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"86\": {\n                    \"type\": 2,\n                    \"name\": \"The 6-th DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"87\": {\n                    \"type\": 2,\n                    \"name\": \"The 7-th DS1923 sensor \",\n                    \"len\": 3,\n                    \"valueType\": \"function\",\n                    \"function\": getDS1923,\n                    \"functionValue\": {\n                        0: \"Identifier\",\n                        1: \"temperature (C)\",\n                        2: \"humidity (%)\"\n                    }\n                },\n                \"88\": {\n                    \"type\": 2,\n                    \"name\": \"Extended data RS232[0]\",\n                    \"len\": 1,\n                    \"valueType\": \"Signed integer\"\n                },\n                \"89\": {\n                    \"type\": 2,\n                    \"name\": \"Extended data RS232[1]\",\n                    \"len\": 1,\n                    \"valueType\": \"Signed integer\"\n                },\n                \"8A\": {\n                    \"type\": 2,\n                    \"name\": \"Fuel level sensor with address 0: temperature (Ð¡)\",\n                    \"len\": 1,\n                    \"valueType\": \"Signed integer\"\n                },\n                \"8B\": {\n                    \"type\": 2,\n                    \"name\": \"Fuel level sensor with address 1: temperature, Ð¡\",\n                    \"len\": 1,\n                    \"valueType\": \"Signed integer\"\n                },\n                \"8C\": {\n                    \"type\": 2,\n                    \"name\": \"Fuel level sensor with address 2: temperature, Ð¡\",\n                    \"len\": 1,\n                    \"valueType\": \"Signed integer\"\n                },\n                \"90\": {\n                    \"type\": 2,\n                    \"name\": \"First iButton key identification number\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A0\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR15\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A1\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR16\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A2\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR17\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A3\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR18\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A4\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR19\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A5\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR20\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A6\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR21\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A7\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR22\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A8\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR23\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"A9\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR24\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"AA\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR25\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"AB\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR26\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"AC\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR27\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"AD\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR28\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"AE\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR29\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"AF\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR30\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B0\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR5\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B1\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR6\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B2\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR7\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B3\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR8\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B4\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR9\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B5\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR10\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B6\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR11\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B7\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR12\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B8\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR13\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"B9\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR14\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"C0\": {\n                    \"type\": 2,\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getCAN_LOG_Data_CAN_A0,\n                    \"name\": \"CAN-LOG data CAN_A0\"\n                },\n                \"C1\": {\n                    \"type\": 2,\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getCAN_LOG_Data_CAN_A1,\n                    \"name\": \"CAN-LOG data CAN_A1: \",\n                    \"functionValue\": {\n                        0: \"fuel level (%)\",\n                        1: \"coolant temperature (C)\",\n                        2: \"engine speed, rmp\"\n                    }\n                },\n                \"C2\": {\n                    \"type\": 2,\n                    \"len\": 4,\n                    \"valueType\": \"function\",\n                    \"function\": getCAN_LOG_Data_CAN_B0,\n                    \"name\": \"CAN-LOG data CAN_B0: Vehicle`s mileage (m)\"\n                },\n                \"C3\": {\n                    \"type\": 2,\n                    \"name\": \"CAN_B1\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"C4\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR0 or vehicle speed (km/h)\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"C5\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR1\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"C6\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR2\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"C7\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR3\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"C8\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR4\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"C9\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR5\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"CA\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR6\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"CB\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR7\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"CC\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR8\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"CD\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR9\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"CE\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR10\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"CF\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR11\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D0\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR12\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D1\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR13\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D2\": {\n                    \"type\": 2,\n                    \"name\": \"CAN8BITR14\",\n                    \"len\": 1,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D3\": {\n                    \"type\": 2,\n                    \"name\": \"Second iButton key identification number\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D4\": {\n                    \"type\": 2,\n                    \"name\": \"Total mileage according to GPS/GLONASS units data\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D5\": {\n                    \"type\": 2,\n                    \"len\": 1,\n                    \"valueType\": \"function\",\n                    \"function\": getState_iButtoKeys,\n                    \"name\": \"State of iButton keys\"\n                },\n                \"D6\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR0\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D7\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR1\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D8\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR2\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"D9\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR3\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"DA\": {\n                    \"type\": 2,\n                    \"name\": \"CAN16BITR4\",\n                    \"len\": 2,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"DB\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR0\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"DC\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR1\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"DD\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR2\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"DE\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR3\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"DF\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR4\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E0\": {\n                    \"type\": 2,\n                    \"name\": \"Number command\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n               \"E1\": {\n                   \"type\": 2,\n                   \"valueType\": \"function\",\n                   \"functionLen\": getCommandLen,\n                   \"function\": getCommand,\n                   \"name\": \"Request response\"\n                },\n               \"E2\": {\n                    \"type\": 2,\n                    \"name\": \"User data\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E3\": {\n                    \"type\": 2,\n                    \"name\": \"User data1\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E4\": {\n                    \"type\": 2,\n                    \"name\": \"User data2\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E5\": {\n                    \"type\": 2,\n                    \"name\": \"User data3\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E6\": {\n                    \"type\": 2,\n                    \"name\": \"User data4\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E7\": {\n                    \"type\": 2,\n                    \"name\": \"User data5\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E8\": {\n                    \"type\": 2,\n                    \"name\": \"User data6\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"E9\": {\n                    \"type\": 2,\n                    \"name\": \"User data7\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"EA\": {\n                    \"type\": 2,\n                    \"name\": \"User data array\",\n                    \"functionLen\": getUserDataArrayLen,\n                    \"valueType\": \"function\",\n                    \"function\": getUserDataArray\n                },\n                \"F0\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR5\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F1\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR6\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F2\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR7\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F3\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR8\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F4\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR9\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F5\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR10\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F6\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR11\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F7\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR12\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F8\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR13\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                },\n                \"F9\": {\n                    \"type\": 2,\n                    \"name\": \"CAN32BITR14\",\n                    \"len\": 4,\n                    \"valueType\": \"Unsigned integer\"\n                }\n\n            }\n    };\n\n    var payoadStr = decodeToJson(payload).toUpperCase();\n    var pos = 0;\n    var lenTagId = 2;\n    var lenPos;\n    var deviceName = getNameDevice('Gal_');\n    var deviceType = 'galileosky';\n    var positionError = 4;\n    // typeGPS_GLONASS = 1 => For devices with built-in GPS module (without GLONASS support):\n    // typeGPS_GLONASS = 2 => For devices with built-in GLONASS/GPS module::\n    var typeGPS_GLONASS = 2;\n\n    var result = setPayload();\n\n    function setPayload() {\n        if (payoadStr !== null && payoadStr.length > 0 && metadata.hasOwnProperty('imei')) {\n            return getPayload();\n        }\n        return null;\n    }\n\n    function getPayload() {\n        lenPos = lenTagId;\n        var typePacket = parseInt(payoadStr.substr(pos, lenPos), 16);\n        pos += lenPos;\n        var rez = {\n            deviceName: deviceName,\n            deviceType: deviceType\n        };\n        var attributes = getAttributes();\n        var telemetry = [];\n        getData(typePacket, attributes, telemetry);\n        rez['attributes'] = attributes;\n        if (telemetry.length > 0) {\n            rez['telemetry'] = telemetry;\n        }\n        return rez;\n    }\n\n    function getAttributes() {\n        return {\n            identifyNumber: metadata.imei,\n            integrationName: metadata.integrationName\n        };\n    }\n\n    function getData(typePacket, attributes, telemetry) {\n        if (typePacket === 1) {\n            getData01(attributes, telemetry);\n        }\n        else if (typePacket === 22) {\n            getData22(telemetry);\n        }\n    }\n\n\n\n    function getData01(attributes, telemetry) {\n        getTelAttrData(attributes, telemetry);\n        if (telemetry.length > 0) {\n            var telemtryStr = JSON.stringify(telemetry[0]);\n            var maxLenth = 400;\n            if (telemtryStr.length > maxLenth) {\n                telemtryStr = telemtryStr.substring(0, maxLenth) + \"...\";\n            }\n            var logs = {\n                ts: telemetry[0].ts,\n                values: {\n                    \"logs\": telemtryStr\n                }\n            };\n            telemetry.push(logs)\n        }\n\n    }\n\n    function getData22(telemetry) {\n        var ts = new Date().getTime();\n        var responseData = {\n            ts: ts,\n            values: {\n                \"logs\":  \"Request: \" + payoadStr.substr(pos)\n            }\n        };\n        telemetry.push(responseData);\n        return telemetry;\n    }\n\n    function getTelAttrData(attributes, telemetry) {\n        var telemetryData = {};\n        var tagId = \"00\";\n        pos = 4;\n        lenPos = constants.tag[tagId].len;\n        var name = constants.tag[tagId].name;\n        var tagIdValue = payoadStr.substr(pos, lenPos);\n        tagIdValue = (parseInt(tagIdValue, 16) > 0) ? 1 : 0;\n        tagIdValue = constants.tag[tagId].value[tagIdValue];\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdValue;\n        else telemetryData[name] = tagIdValue;\n        pos = 6;\n        lenPos = lenTagId;\n        tagId = payoadStr.substr(pos, lenPos);\n        pos += lenPos;\n        while (pos < payoadStr.toString().length) {\n            if (constants.tag.hasOwnProperty(tagId)) {\n                lenPos = (constants.tag[tagId].hasOwnProperty(\"functionLen\")) ? constants.tag[tagId].functionLen(tagId)*2 : constants.tag[tagId].len * 2;\n                tagIdValue = payoadStr.substr(pos, lenPos);\n               \n                pos += lenPos;\n                addTagNameValueToAttrTelemetry(attributes, telemetryData, tagId, tagIdValue);\n            } else {\n                throw Error(\"No tagId in spr: \" + tagId);\n            }\n            lenPos = lenTagId;\n            var tagIdNext = payoadStr.substr(pos, lenPos);\n            pos += lenPos;\n            if (parseInt(tagIdNext, 16) < parseInt(tagId, 16)) {\n                addToTelemetry(telemetry, telemetryData);\n                telemetryData = {};\n                if (Object.keys(telemetryData).length > 0) {\n                    var ts = new Date().getTime();\n                    var telemetryValues = {\n                        ts: ts,\n                        values: telemetryData\n                    };\n                    telemetry.push(telemetryValues);\n                    telemetryData = {};\n                }\n            }\n            tagId = tagIdNext;\n        }\n        addToTelemetry(telemetry, telemetryData);\n    }\n\n    function addToTelemetry(telemetry, telemetryData) {\n        if (Object.keys(telemetryData).length > 0) {\n            var ts = new Date().getTime();\n            var telemetryValues = {\n                ts: ts,\n                values: telemetryData\n            };\n            telemetry.push(telemetryValues);\n        }\n    }\n\n    function addTagNameValueToAttrTelemetry(attributes, telemetryData, tagId, tagIdValue) {\n        if (constants.tag[tagId].hasOwnProperty('valueType') && (constants.tag[tagId].valueType === \"function\")) {\n            constants.tag[tagId].function(attributes, telemetryData, tagId, tagIdValue);\n        } else {\n            var name = constants.tag[tagId].name;\n            if (constants.tag[tagId].hasOwnProperty('value')) {\n                tagIdValue = hexStringToUInt(tagIdValue, 1);\n                if (constants.tag[tagId].value.hasOwnProperty(tagIdValue)) {\n                    tagIdValue = constants.tag[tagId].value[tagIdValue];\n                }\n            } else if (constants.tag[tagId].hasOwnProperty('valueType')) {\n                if (constants.tag[tagId].valueType === \"Unsigned integer\") {\n                    tagIdValue = hexStringToUInt(tagIdValue, 1);\n                } else if (constants.tag[tagId].valueType === \"Signed integer\") {\n                    tagIdValue = tagIdValue = hexStringToInt(tagIdValue, 1);\n                } else if (constants.tag[tagId].valueType === \"String\") {\n                    tagIdValue = hexStringToAncii(tagIdValue);\n                }\n            }\n            if (constants.tag[tagId].type === 1) attributes[name] = tagIdValue;\n            else telemetryData[name] = tagIdValue;\n        }\n    }\n\n    function getNameDevice(deviceName) {\n        return (metadata.hasOwnProperty('imei')) ? (deviceName + metadata['imei']) : deviceName;\n    }\n\n    function decodeToJson(payoadStr) {\n        try {\n            return JSON.parse(String.fromCharCode.apply(String, payoadStr));\n        } catch (e) {\n            return JSON.parse(JSON.stringify(payoadStr));\n        }\n    }\n\n    function hexStringToStringRev(str) {\n        var strRev = \"\";\n        for (var i = (str.length - 2); i >= 0; i -= 2) {\n            strRev += str.substring(i, i + 2);\n        }\n        return strRev;\n    }\n\n    function hexStringToInt(hexStr, rev) {\n        var hex = (rev === 0) ? hexStr : hexStringToStringRev(hexStr);\n        if (hex.length % 2 != 0) {\n            hex = \"0\" + hex;\n        }\n        var num = parseInt(hex, 16);\n        var maxVal = Math.pow(2, hex.length / 2 * 8);\n        if (num > maxVal / 2 - 1) {\n            num = num - maxVal\n        }\n        return num;\n    }\n\n    function hexStringToUInt(hexStr, rev) {\n        var str = (rev === 0) ? hexStr : hexStringToStringRev(hexStr);\n        var array = str.match(/.{1,2}/g);\n        var a = [];\n        array.forEach(function (element) {\n            a.push(parseInt(element, 16));\n        });\n        var bytes = new Uint8Array(a);\n        var val = 0;\n        var len = bytes.length;\n        for (var j = 0; j < len; j++) {\n            val += bytes[j];\n            if (j < (len - 1)) {\n                val = val << 8;\n            }\n        }\n        return val;\n    }\n\n    function hexStringToAncii(strHex) {\n        return strHex.match(/.{1,2}/g).map(function (v) {\n            return String.fromCharCode(parseInt(v, 16));\n        }).join('');\n    }\n\n    function timeMsToString(ms) {\n        return new Date(ms).toISOString();\n    }\n\n    function getBit(byte, bitNumber) {\n        return ((byte & (1 << bitNumber)) != 0) ? 1 : 0;\n    }\n\n    function getMask(bitNumber, len) {\n        var mask = 1;\n        for (var i = 1; i < len; i++) {\n            mask = mask << 1;\n            mask++;\n\n        }\n        return mask << bitNumber;\n    }\n\n    function getDateTimeResponse(attributes, telemetryData, tagId, tagIdValue, name) {\n        var name = constants.tag[tagId].functionValue[1];\n        tagIdValue = hexStringToUInt(tagIdValue, 1) * 1000;\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdValue;\n        else telemetryData[name] = tagIdValue;\n        name = constants.tag[tagId].functionValue[2];\n        tagIdValue = timeMsToString(tagIdValue);\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdValue;\n        else telemetryData[name] = tagIdValue;\n    }\n\n    function getCoordinates(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].functionValue[\"0_0_3\"];\n        var tagIdVal = parseInt(tagIdValue.substring(1, 2), 16);\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n        name = constants.tag[tagId].functionValue[\"0_4_7\"].name;\n        tagIdVal = parseInt(tagIdValue.substring(0, 1), 16);\n        positionError = tagIdVal;\n        tagIdVal = (constants.tag[tagId].functionValue[\"0_4_7\"].hasOwnProperty(tagIdVal)) ? constants.tag[tagId].functionValue[\"0_4_7\"][tagIdVal] : constants.tag[tagId].functionValue[\"0_4_7\"][3];\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n        name = constants.tag[tagId].functionValue[\"1_4\"];\n        tagIdVal = hexStringToUInt(tagIdValue.substring(2, 10), 1);\n        tagIdVal = getLatLongToStr(tagIdVal);\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n        name = constants.tag[tagId].functionValue[\"5-9\"];\n        tagIdVal = hexStringToUInt(tagIdValue.substring(10), 1);\n        tagIdVal = getLatLongToStr(tagIdVal);\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n    }\n\n    function getLatLongToStr(strInt) {\n        var strVal = strInt.toString();\n        return strInt > 0 ? strVal.substring(0, 2) + \".\" + strVal.substring(2) : strVal;\n    }\n\n    function getSpeed(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].functionValue[\"0_1\"];\n        var tagIdVal = hexStringToUInt(tagIdValue.substring(0, 4), 1) / 10;\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n        name = constants.tag[tagId].functionValue[\"2_3\"];\n        tagIdVal = hexStringToUInt(tagIdValue.substring(4, 8), 1) / 10;\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n    }\n\n    function getPositioningError(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var tagIdVal = parseInt(tagIdValue, 16);\n        var tagIdName = (constants.tag[tagId].functionValue.hasOwnProperty(positionError)) ? constants.tag[tagId].functionValue[positionError] : constants.tag[tagId].functionValue[3];\n        if (positionError === 0) {\n            tagIdVal = tagIdVal / 10;\n        } else if (positionError === 2) {\n            tagIdVal = tagIdVal * 10;\n        }\n        tagIdVal = tagIdVal.toString() + \", \" + tagIdName;\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n    }\n\n    function getStatusDevice(attributes, telemetryData, tagId, tagIdValue) {\n        tagIdValue = hexStringToUInt(tagIdValue, 1);\n        for (var bitNumber = 0; bitNumber < 16; (bitNumber === 12) ? bitNumber += 2 : bitNumber++) {\n            var bit = getBit(tagIdValue, bitNumber);\n            var name = constants.tag[tagId].functionValue[bitNumber].name;\n            var tagIdVal;\n            if (bitNumber === 12) {\n                tagIdVal = (tagIdValue & getMask(constants.tag[tagId].functionValue[bitNumber].bitNumber, constants.tag[tagId].functionValue[bitNumber].len)) >> bitNumber;\n            } else {\n                if (bitNumber === 11) {\n                    bit = (typeGPS_GLONASS == 1) ? bit : (bit === 0) ? 1 : 0;\n                }\n                tagIdVal = constants.tag[tagId].functionValue[bitNumber][bit];\n            }\n            if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n            else telemetryData[name] = tagIdVal;\n        }\n    }\n\n    function getAcceleration(attributes, telemetryData, tagId, tagIdValue) {\n        tagIdValue = hexStringToUInt(tagIdValue, 1);\n        for (var i = 0; i < 3; i++) {\n            var name = constants.tag[tagId].functionValue[i].name;\n            var bitNumber = constants.tag[tagId].functionValue[i].bitNumber;\n            var tagIdVal = (tagIdValue & getMask(bitNumber, constants.tag[tagId].functionValue[i].len)) >> bitNumber;\n            if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n            else telemetryData[name] = tagIdVal;\n        }\n    }\n\n    function getEcoDrive(attributes, telemetryData, tagId, tagIdValue) {\n        tagIdValue = hexStringToStringRev(tagIdValue);\n        for (var i = 0; i < 4; i++) {\n            var name = constants.tag[tagId].functionValue[i];\n            var tagIdVal = (parseInt(tagIdValue.substring(i * 2, (i * 2 + 2)), 16) / 100) * 9.8;\n            if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n            else telemetryData[name] = tagIdVal\n        }\n    }\n\n\n    function getExpandedStatus(attributes, telemetryData, tagId, tagIdValue) {\n        tagIdValue = hexStringToUInt(tagIdValue, 1);\n        for (var i = 0; i < 3; i++) {\n            var name = constants.tag[tagId].functionValue[i].name;\n            var bitNumber = constants.tag[tagId].functionValue[i].bitNumber;\n            var tagIdVal = (tagIdValue & getMask(bitNumber, constants.tag[tagId].functionValue[i].len)) >> bitNumber;\n            tagIdVal = constants.tag[tagId].functionValue[i][tagIdVal];\n            if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n            else telemetryData[name] = tagIdVal;\n        }\n    }\n\n    function getRefrigerationData(attributes, telemetryData, tagId, tagIdValue) {\n        if (hexStringToInt(tagIdValue, 1) !== 0) {\n            for (var byteNumber = 1; byteNumber < 8; (byteNumber === 2) ? byteNumber += 2 : byteNumber++) {\n                if (constants.tag[tagId].functionValue.hasOwnProperty(byteNumber)) {\n                    var name = constants.tag[tagId].name;\n                    var len = constants.tag[tagId].functionValue[byteNumber].len;\n                    var tagIdVal = parseInt(tagIdValue.substring((byteNumber - 1) * 2, (byteNumber - 1) * 2 + len * 2), 16);\n                    name = name + constants.tag[tagId].functionValue[byteNumber].name;\n                    if (byteNumber === 1) {\n                        if (constants.tag[tagId].functionValue[byteNumber].hasOwnProperty(tagIdVal)) {\n                            tagIdVal = constants.tag[tagId].functionValue[byteNumber][tagIdVal];\n                        } else {\n                            tagIdVal = \"Unknown device type: id = \" + tagIdVal;\n                        }\n                        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n                        else telemetryData[name] = tagIdVal;\n                    } else if (byteNumber > 1) {\n                        for (var i = 0; i < (len * 8 - 1); i++) {\n                            if (constants.tag[tagId].functionValue[byteNumber].hasOwnProperty(i)) {\n                                var nameBit = (byteNumber > 2 && i === 3) ? name + constants.tag[tagId].functionValue[byteNumber][i].name : name + constants.tag[tagId].functionValue[byteNumber][i];\n                                var lenBit = (byteNumber > 2 && i === 3) ? constants.tag[tagId].functionValue[byteNumber][i].len : 1;\n                                var tagIdValBit = (tagIdVal & getMask(i, lenBit)) >> i;\n                                tagIdValBit = (lenBit === 1) ? (tagIdValBit === 0) ? \"no\" : \"yes\" : tagIdValBit;\n                                if (constants.tag[tagId].type === 1) attributes[nameBit] = tagIdValBit;\n                                else telemetryData[nameBit] = tagIdValBit;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function getFuelLevelSensor(attributes, telemetryData, tagId, tagIdValue) {\n        var tagIdVal = hexStringToUInt(tagIdValue.substring(0, 4), 1);\n        var name = constants.tag[tagId].functionValue[0];\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n        tagIdVal = hexStringToInt(tagIdValue.substring(4), 1);\n        name = constants.tag[tagId].functionValue[2];\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n    }\n\n    function getThermometer(attributes, telemetryData, tagId, tagIdValue) {\n        var tagIdVal = parseInt(tagIdValue.substring(0, 2), 16);\n        var name = constants.tag[tagId].functionValue[0];\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n        tagIdVal = hexStringToInt(tagIdValue.substring(2), 1);\n        tagIdVal = (tagIdVal === -128) ? \"disconnection\" : tagIdVal\n        name = constants.tag[tagId].functionValue[1];\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal\n    }\n\n\n    function getCAN_LOG_Data_CAN_A0(attributes, telemetryData, tagId, tagIdValue) {\n        var tagIdVal = hexStringToUInt(tagIdValue, 1) / 2;\n        var name = constants.tag[tagId].name;\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal\n    }\n\n    function getCAN_LOG_Data_CAN_A1(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var off = 0;\n        for (var byteNumber = 0; byteNumber < 3; byteNumber++) {\n            var len = (byteNumber === 2) ? 4 : 2;\n            var tagIdVal = tagIdValue.substring(off, off + len);\n            off += len;\n            tagIdVal = (byteNumber === 2) ? hexStringToUInt(tagIdVal, 1) : parseInt(tagIdVal, 16);\n            tagIdVal = (byteNumber === 0) ? tagIdVal * 0.4 : (byteNumber === 1) ? tagIdVal - 40 : tagIdVal * 0.125;\n            var nameByte = name + constants.tag[tagId].functionValue[byteNumber];\n            if (constants.tag[tagId].type === 1) attributes[nameByte] = tagIdVal;\n            else telemetryData[nameByte] = tagIdVal;\n        }\n    }\n\n    function getCAN_LOG_Data_CAN_B0(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var tagIdVal = hexStringToUInt(tagIdValue, 1) * 5;\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n    }\n\n    function getState_iButtoKeys(attributes, telemetryData, tagId, tagIdValue) {\n        var tagIdValue = hexStringToUInt(tagIdValue, 1);\n        if (tagIdValue > 0) {\n            var name = constants.tag[tagId].name;\n            var tagIdVal = null;\n            for (var bitNumber = 0; bitNumber < 8; bitNumber++) {\n                var bit = getBit(tagIdValue, bitNumber);\n                if (bit > 0) {\n                    tagIdVal = (tagIdVal === null) ? \"connected: \" : tagIdVal += \", \";\n                    tagIdVal += (bitNumber + 1).toString();\n                }\n            }\n            if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n            else telemetryData[name] = tagIdVal;\n        }\n    }\n\n    function getDS1923(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var off = 0;\n        var len = 2;\n        for (var byteNumber = 0; byteNumber < 3; byteNumber++) {\n            var tagIdVal = tagIdValue.substring(off, off + len);\n            off += len;\n            tagIdVal = (byteNumber === 1) ? parseInt(tagIdVal, 16) : hexStringToUInt(tagIdVal, 1);\n            tagIdVal = (byteNumber === 2) ? tagIdVal * 100 / 255 : tagIdVal;\n            var nameByte = name + constants.tag[tagId].functionValue[byteNumber];\n            if (constants.tag[tagId].type === 1) attributes[nameByte] = tagIdVal;\n            else telemetryData[nameByte] = tagIdVal;\n        }\n    }\n\n    function getPressurePro(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var off = 0;\n        for (var i = 0; i < constants.tag[tagId].len; i += 2) {\n            var nameBytes = name + (i / 2).toString();\n            var len = 4;\n            var tagIdVal = tagIdValue.substring(off, off + len);\n            off += len;\n            var tagIdValByte = parseInt(tagIdVal.substring(0, 2), 16);\n            var nameByte = nameBytes + constants.tag[tagId].functionValue[0];\n            if (constants.tag[tagId].type === 1) attributes[nameByte] = tagIdValByte;\n            else telemetryData[nameByte] = tagIdValByte;\n            tagIdValByte = parseInt(tagIdVal.substring(2), 16);\n            for (var bitNumber = 0; bitNumber < 6; bitNumber++) {\n                if (constants.tag[tagId].functionValue[1].hasOwnProperty(bitNumber)) {\n                    var nameBit = (constants.tag[tagId].functionValue[1][bitNumber].hasOwnProperty(\"name\")) ? nameBytes + constants.tag[tagId].functionValue[1][bitNumber].name : nameBytes;\n                    var len = (constants.tag[tagId].functionValue[1][bitNumber].hasOwnProperty(\"len\")) ? constants.tag[tagId].functionValue[1][bitNumber].len : 1;\n                    var tagIdValBit = (tagIdValByte & getMask(bitNumber, len)) >> bitNumber;\n                    if (bitNumber === 0) {\n                        tagIdValBit *= 20;\n                        tagIdValBit = (tagIdValBit <= 100) ? tagIdValBit : 100 - tagIdValBit;\n                        if (constants.tag[tagId].type === 1) attributes[nameBit] = tagIdValBit;\n                        else telemetryData[nameBit] = tagIdValBit;\n                    } else if (constants.tag[tagId].functionValue[1][bitNumber].hasOwnProperty(tagIdValBit)) {\n                        tagIdValBit = constants.tag[tagId].functionValue[1][bitNumber][tagIdValBit];\n                        if (constants.tag[tagId].type === 1) attributes[nameBit] = tagIdValBit;\n                        else telemetryData[nameBit] = tagIdValBit;\n                    }\n                }\n            }\n        }\n    }\n\n     function getDosimeterData(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var len = constants.tag[tagId].functionValue[0].len * 2;\n        var off = 0;\n        var tagIdValByte = hexStringToUInt(tagIdValue.substring(off, off + len), 1);\n        off += len;\n        var nameByte = name + constants.tag[tagId].functionValue[0].name;\n        var nameBit = nameByte + constants.tag[tagId].functionValue[0][0].name;\n        var bitNumber = constants.tag[tagId].functionValue[0][0].bitNumber;\n        len = constants.tag[tagId].functionValue[0][0].len;\n        var tagIdValBit = (tagIdValByte & getMask(bitNumber, len)) >> bitNumstatusber;\n        if (constants.tag[tagId].type === 1) attributes[nameBit] = tagIdValBit;\n        else telemetryData[nameBit] = tagIdValBit;\n        nameBit = nameByte + constants.tag[tagId].functionValue[0][6].name;\n        bitNumber = constants.tag[tagId].functionValue[0][6].bitNumber;\n        len = constants.tag[tagId].functionValue[0][6].len;\n        tagIdValBit = (tagIdValByte & getMask(bitNumber, len)) >> bitNumber;\n        if (constants.tag[tagId].type === 1) attributes[nameBit] = tagIdValBit;\n        else telemetryData[nameBit] = tagIdValBit;\n        len = constants.tag[tagId].functionValue[2].len * 2;\n        tagIdValByte = parseInt(tagIdValue.substring(off, off + len), 16);\n        nameByte = name + constants.tag[tagId].functionValue[2].name;\n        for (var bitNumber = 0; bitNumber < 8; bitNumber++) {\n            if (constants.tag[tagId].functionValue[2].hasOwnProperty(bitNumber)) {\n                nameBit = nameByte + constants.tag[tagId].functionValue[2][bitNumber].name;\n                var len = (constants.tag[tagId].functionValue[2][bitNumber].hasOwnProperty(\"len\")) ? constants.tag[tagId].functionValue[2][bitNumber].len : 1;\n                var tagIdValBit = (tagIdValByte & getMask(bitNumber, len)) >> bitNumber;\n                tagIdValBit = constants.tag[tagId].functionValue[2][bitNumber][tagIdValBit];\n                if (constants.tag[tagId].type === 1) attributes[nameBit] = tagIdValBit;\n                else telemetryData[nameBit] = tagIdValBit;\n            }\n        }\n\n    }\n\n    function getUserDataArray(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var tagIdVal = hexStringToStringRev(tagIdValue);\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n    }\n\n    function getUserDataArrayLen(tagId) {\n        var lenPos = parseInt(payoadStr.substr(pos, 2), 16);\n        pos += 2;\n        return lenPos;\n    }\n\n    function getCommand(attributes, telemetryData, tagId, tagIdValue) {\n        var name = constants.tag[tagId].name;\n        var tagIdVal = hexStringToAncii(tagIdValue);\n        if (constants.tag[tagId].type === 1) attributes[name] = tagIdVal;\n        else telemetryData[name] = tagIdVal;\n    }\n\n    function getCommandLen(tagId) {\n        var lenPos = parseInt(payoadStr.substr(pos, 2), 16);\n        pos += 2;\n        return lenPos;\n    }\n\n    return result;"
  },
  "additionalInfo": null
}