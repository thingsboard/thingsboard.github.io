{
  "alias": "next_variant2",
  "name": "ESP32_OTA_widget",
  "descriptor": {
    "type": "latest",
    "sizeX": 7.5,
    "sizeY": 3,
    "resources": [],
    "templateHtml": "<div tb-toast toastTarget=\"{{ toastTargetId }}\" style=\"width: 100%; height: 100%;\">\n    <form *ngIf=\"attributeUpdateFormGroup\"\n          class=\"attribute-update-form\"\n          [formGroup]=\"attributeUpdateFormGroup\"\n          [ngClass]=\"{'small-width': smallWidthContainer}\"\n          (ngSubmit)=\"updateAttribute()\">\n        <div style=\"padding: 0 8px; margin: auto 0;\">\n            <div class=\"attribute-update-form__grid\" [fxShow]=\"entityDetected && isValidParameter && dataKeyDetected\">\n                <div class=\"grid__element\" \n                    [ngClass]=\"{'horizontal-alignment': isHorizontal && !changeAlignment}\">\n                    <mat-form-field class=\"mat-block\"\n                                    floatLabel=\"{{settings.showLabel ? 'auto' : 'always'}}\"\n                                    [hideRequiredMarker]=\"!settings.showLabel\">\n                        <mat-label>Target firmware version</mat-label>\n                        <input matInput\n                               formControlName=\"lastTargetFwVer\"\n                               (focus)=\"isFocused = true\"/>\n                    </mat-form-field>\n                    \n                    <mat-form-field class=\"mat-block\"\n                                    floatLabel=\"{{settings.showLabel ? 'auto' : 'always'}}\"\n                                    [hideRequiredMarker]=\"!settings.showLabel\">\n                        <mat-label>Target server URL</mat-label>\n                        <input matInput\n                               formControlName=\"lastTargetFwUrl\"\n                               (focus)=\"isFocused = true\"/>\n                    </mat-form-field>    \n                    <button class=\"test\" mat-button mat-raised-button color=\"primary\"\n                            type=\"submit\"\n                            [disabled]=\"disableButton()\"\n                            matTooltip=\"{{ 'widgets.input-widgets.update-attribute' | translate }}\"\n                            matTooltipPosition=\"above\">\n                        START OTA\n                    </button>\n                </div>\n            </div>\n    \n            <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\" [fxHide]=\"entityDetected\" >\n                {{ 'widgets.input-widgets.no-entity-selected' | translate }}\n            </div>\n            <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\"\n                 [fxShow]=\"entityDetected && !dataKeyDetected\">\n                {{ 'widgets.input-widgets.no-attribute-selected' | translate }}\n            </div>\n            <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\"\n                 [fxShow]=\"entityDetected && !isValidParameter\">\n                {{ 'widgets.input-widgets.no-coordinate-specified' | translate }}\n            </div>\n        </div>\n    </form>\n</div>",
    "templateCss": ".attribute-update-form {\n    overflow: hidden;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.attribute-update-form__grid {\n    display: flex;\n}\n.grid__element {\n    flex-direction: column;\n    display: flex;\n    flex: 1;\n}\n\n.test{\n    width: 130px;\n}\n\n.grid__element.horizontal-alignment {\n    flex-direction: row;\n}\n\n\n.attribute-update-form .mat-button.mat-icon-button {\n    width: 32px;\n    min-width: 32px;\n    height: 32px;\n    min-height: 32px;\n    padding: 0 !important;\n    margin: 0;\n    line-height: 20px;\n}\n\n.attribute-update-form .mat-button.getLocation {\n    margin-right: 10px;\n}\n\n.attribute-update-form .mat-icon-button mat-icon {\n    width: 20px;\n    min-width: 20px;\n    height: 20px;\n    min-height: 20px;\n    font-size: 20px;\n}\n\n.attribute-update-form mat-form-field{\n    width: 100%;\n    padding-right: 5px;\n}\n\n.attribute-update-form.small-width mat-form-field{\n    width: 150px;\n}\n\n.tb-toast {\n    font-size: 14px!important;\n}",
    "controllerScript": "let $scope;\r\nlet settings;\r\nlet attributeService;\r\nlet utils;\r\nlet translate;\r\n\r\nself.onInit = function() {\r\n    self.ctx.ngZone.run(function() {\r\n       init(); \r\n       self.ctx.detectChanges(true);\r\n    });\r\n};\r\n\r\n\r\nfunction init() {\r\n    $scope = self.ctx.$scope;\r\n    attributeService = $scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\r\n    utils = $scope.$injector.get(self.ctx.servicesMap.get('utils'));\r\n    translate = $scope.$injector.get(self.ctx.servicesMap.get('translate'));\r\n    $scope.toastTargetId = 'input-widget' + utils.guid();\r\n    settings = utils.deepClone(self.ctx.settings) || {};\r\n    settings.showLabel = utils.defaultValue(settings.showLabel, true);\r\n    $scope.settings = settings;\r\n    $scope.isValidParameter = true;\r\n    $scope.dataKeyDetected = false; \r\n    $scope.activeVal = false;\r\n    $scope.attributeUpdateFormGroup = $scope.fb.group(\r\n        {\r\n            lastTargetFwVer: '',\r\n            lastTargetFwUrl: ''\r\n\r\n        }\r\n    );\r\n    \r\n\r\n    if (self.ctx.datasources && self.ctx.datasources.length) {\r\n        let datasource = self.ctx.datasources[0];\r\n        if (datasource.type === 'entity') {\r\n            if (datasource.entityType && datasource.entityId) {\r\n                $scope.entityName = datasource.entityName;\r\n                if (settings.widgetTitle && settings.widgetTitle.length) {\r\n                    $scope.titleTemplate = utils.customTranslation(settings.widgetTitle, settings.widgetTitle);\r\n                } else {\r\n                    $scope.titleTemplate = self.ctx.widgetConfig.title;\r\n                }\r\n                $scope.entityDetected = true;\r\n            }\r\n        }\r\n        if (datasource.dataKeys.length > 1) {\r\n            $scope.dataKeyDetected = true;\r\n            for (let i = 0; i < datasource.dataKeys.length; i++) {\r\n                if (datasource.dataKeys[i].type != \"attribute\"){\r\n                    $scope.isValidParameter = false;\r\n                }\r\n                if (datasource.dataKeys[i].name !== settings.versionKeyName && datasource.dataKeys[i].name !== settings.serverKeyName && datasource.dataKeys[i].name !== 'active'){\r\n                    $scope.dataKeyDetected = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    self.ctx.widgetTitle = utils.createLabelFromDatasource(self.ctx.datasources[0], $scope.titleTemplate);\r\n\r\n    $scope.updateAttribute = function () {\r\n        if ($scope.entityDetected) {\r\n            let datasource = self.ctx.datasources[0];\r\n            for (let i = 0; i < self.ctx.data.length; i++) {\r\n                let attributeValue = self.ctx.data[i].data[0][1];\r\n                let dataKey = self.ctx.data[i].dataKey.name;\r\n                console.log(`${dataKey} : ${attributeValue}`);\r\n                if (dataKey === 'active') {\r\n                    $scope.activeVal = (attributeValue === 'true');\r\n                }\r\n            }\r\n            let formValue = $scope.attributeUpdateFormGroup.value;\r\n            let attributes = [\r\n                                {\r\n                                    key: settings.versionKeyName,\r\n                                    value: formValue.lastTargetFwVer\r\n                                },{\r\n                                    key: settings.serverKeyName,\r\n                                    value: formValue.lastTargetFwUrl\r\n                                }\r\n                            ] \r\n            self.ctx.rxjs.forkJoin([\r\n                attributeService.saveEntityAttributes(\r\n                    datasource.entity.id,\r\n                    'SERVER_SCOPE',\r\n                    attributes\r\n                ),\r\n                attributeService.saveEntityAttributes(\r\n                    datasource.entity.id,\r\n                    'SHARED_SCOPE',\r\n                    attributes\r\n                ),\r\n            ]).subscribe(\r\n                function success() {\r\n                    $scope.attributeUpdateFormGroup.patchValue({\r\n                        'lastTargetFwVer': '',\r\n                        'lastTargetFwUrl': ''\r\n                    });\r\n                    if($scope.activeVal){\r\n                        $scope.showSuccessToast('OTA configuration saved', 2000, 'bottom', 'right', $scope.toastTargetId);\r\n                        $scope.activeVal = false\r\n                    }else{\r\n                         $scope.showErrorToast('OTA configuration saved,  but will be sent when device become connected', 'bottom', 'right', $scope.toastTargetId);\r\n                    }\r\n                },\r\n                function fail() {\r\n                    $scope.showErrorToast('OTA configuration can not be saved', 'bottom', 'right', $scope.toastTargetId);\r\n                }\r\n            )\r\n        }\r\n    };\r\n    \r\n    $scope.disableButton = function () {\r\n        let formValue = $scope.attributeUpdateFormGroup.value;\r\n        return (formValue.lastTargetFwVer === '' || formValue.lastTargetFwUrl === '');\r\n    };\r\n}\r\n\r\nself.onDataUpdated = function() {\r\n};\r\n\r\n\r\nself.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1,\r\n        maxDataKeys: 3,\r\n        singleEntity: true\r\n    };\r\n};\r\n\r\nself.onDestroy = function() {\r\n};",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"widgetTitle\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"versionKeyName\": {\n                \"title\": \"Version key name\",\n                \"type\": \"string\",\n                \"default\": \"lastTargetFwVer\"\n            },\n            \"serverKeyName\": {\n                \"title\": \"Server URL key name\",\n                \"type\": \"string\",\n                \"default\": \"lastTargetFwUrl\"\n            },\n            \"showLabel\": {\n                \"title\": \"Show label\",\n                \"type\": \"boolean\",\n                \"default\": true\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"widgetTitle\",\n        \"versionKeyName\",\n        \"serverKeyName\",\n        \"showLabel\"\n    ]\n}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"ESP32_OTA_widget\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
  }
}