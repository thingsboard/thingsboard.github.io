{
  "widgetsBundle": {
    "alias": "ota_widgets",
    "title": "OTA widgets",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "ota_for_esp32_widget",
      "name": "ESP32_OTA_widget",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div tb-toast toastTarget=\"{{ toastTargetId }}\" style=\"width: 100%; height: 100%;\">\n    <form *ngIf=\"attributeUpdateFormGroup\"\n          class=\"attribute-update-form\"\n          [formGroup]=\"attributeUpdateFormGroup\"\n          [ngClass]=\"{'small-width': smallWidthContainer}\"\n          (ngSubmit)=\"updateOtaConfig()\">\n        <div style=\"padding: 0 8px; margin: auto 0;\">\n            <div class=\"attribute-update-form__grid\" [fxShow]=\"entityDetected && isValidParameter\">\n                <div class=\"grid__element\" \n                    [ngClass]=\"{'horizontal-alignment': isHorizontal && !changeAlignment}\">\n                    <mat-form-field class=\"mat-block\"\n                                    floatLabel=\"{{settings.showLabel ? 'auto' : 'always'}}\"\n                                    [hideRequiredMarker]=\"!settings.showLabel\">\n                        <mat-label>Target firmware version</mat-label>\n                        <input matInput\n                               formControlName=\"lastTargetFwVer\"\n                               (focus)=\"isFocused = true\"/>\n                    </mat-form-field>\n                    \n                    <mat-form-field class=\"mat-block\"\n                                    floatLabel=\"{{settings.showLabel ? 'auto' : 'always'}}\"\n                                    [hideRequiredMarker]=\"!settings.showLabel\">\n                        <mat-label>Target server URL</mat-label>\n                        <input matInput\n                               formControlName=\"lastTargetFwUrl\"\n                               (focus)=\"isFocused = true\"/>\n                    </mat-form-field>    \n                    <button class=\"test\" mat-button mat-raised-button color=\"primary\"\n                            type=\"submit\"\n                            [disabled]=\"disableButton()\"\n                            matTooltip=\"{{ 'widgets.input-widgets.update-attribute' | translate }}\"\n                            matTooltipPosition=\"above\">\n                        START OTA\n                    </button>\n                </div>\n            </div>\n    \n            <div style=\"text-align: center; font-size: 18px; color: #a0a0a0;\" [fxHide]=\"entityDetected\" >\n                {{ 'widgets.input-widgets.no-entity-selected' | translate }}\n            </div>\n        </div>\n    </form>\n</div>",
        "templateCss": ".attribute-update-form {\n    overflow: hidden;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.attribute-update-form__grid {\n    display: flex;\n}\n.grid__element {\n    flex-direction: column;\n    display: flex;\n    flex: 1;\n}\n\n.test{\n    width: 130px;\n}\n\n.grid__element.horizontal-alignment {\n    flex-direction: row;\n}\n\n\n.attribute-update-form .mat-button.mat-icon-button {\n    width: 32px;\n    min-width: 32px;\n    height: 32px;\n    min-height: 32px;\n    padding: 0 !important;\n    margin: 0;\n    line-height: 20px;\n}\n\n.attribute-update-form .mat-button.getLocation {\n    margin-right: 10px;\n}\n\n.attribute-update-form .mat-icon-button mat-icon {\n    width: 20px;\n    min-width: 20px;\n    height: 20px;\n    min-height: 20px;\n    font-size: 20px;\n}\n\n.attribute-update-form mat-form-field{\n    width: 100%;\n    padding-right: 5px;\n}\n\n.attribute-update-form.small-width mat-form-field{\n    width: 150px;\n}\n\n.tb-toast {\n    font-size: 14px!important;\n}",
        "controllerScript": "let $scope;\nlet settings;\nlet attributeService;\nlet utils;\nlet translate;\n\nself.onInit = function () {\n    self.ctx.ngZone.run(function () {\n        init();\n        self.ctx.detectChanges(true);\n    });\n};\n\nfunction init() {\n    $scope = self.ctx.$scope;\n    attributeService = $scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n    utils = $scope.$injector.get(self.ctx.servicesMap.get('utils'));\n    translate = $scope.$injector.get(self.ctx.servicesMap.get('translate'));\n    $scope.toastTargetId = 'input-widget' + utils.guid();\n    settings = utils.deepClone(self.ctx.settings) || {};\n    settings.showLabel = utils.defaultValue(settings.showLabel, true);\n    $scope.settings = settings;\n    $scope.isValidParameter = true;\n    $scope.activeVal = false;\n    $scope.attributeUpdateFormGroup = $scope.fb.group({\n        lastTargetFwVer: '',\n        lastTargetFwUrl: ''\n    });\n\n    if (self.ctx.datasources && self.ctx.datasources.length) {\n        let datasource = self.ctx.datasources[0];\n        if (datasource.type === 'entity') {\n            if (datasource.entityType && datasource.entityId) {\n                $scope.entityName = datasource.entityName;\n                if (settings.widgetTitle && settings.widgetTitle.length) {\n                    $scope.titleTemplate = utils.customTranslation(settings.widgetTitle, settings.widgetTitle);\n                } else {\n                    $scope.titleTemplate = self.ctx.widgetConfig.title;\n                }\n                $scope.entityDetected = true;\n            }\n        }\n    }\n\n    $scope.updateOtaConfig = function () {\n        if ($scope.entityDetected) {\n            let datasource = self.ctx.datasources[0];\n            for (let i = 0; i < self.ctx.data.length; i++) {\n                let attributeValue = self.ctx.data[i].data[0][1];\n                let dataKey = self.ctx.data[i].dataKey.name;\n                if (dataKey === 'active') {\n                    $scope.activeVal = (attributeValue === 'true');\n                }\n            }\n            let formValue = $scope.attributeUpdateFormGroup.value;\n            self.ctx.rxjs.forkJoin([\n                attributeService.saveEntityAttributes(\n                    datasource.entity.id,\n                    'SERVER_SCOPE',\n                    [\n                        {\n                            key: 'lastTargetFwVer',\n                            value: formValue.lastTargetFwVer\n                        },\n                        {\n                            key: 'lastTargetFwUrl',\n                            value: formValue.lastTargetFwUrl\n                        },\n                        {\n                            key: 'lastOtaStartedOn',\n                            value: Date.now()\n                        }\n                    ]\n                ),\n                attributeService.saveEntityAttributes(\n                    datasource.entity.id,\n                    'SHARED_SCOPE',\n                    [\n                        {\n                            key: 'targetFwVer',\n                            value: formValue.lastTargetFwVer\n                        },\n                        {\n                            key: 'targetFwUrl',\n                            value: formValue.lastTargetFwUrl\n                        }\n                    ]\n                )\n            ]).subscribe(\n                function success() {\n                    $scope.attributeUpdateFormGroup.patchValue({\n                        'lastTargetFwVer': '',\n                        'lastTargetFwUrl': ''\n                    });\n                    if ($scope.activeVal) {\n                        $scope.showSuccessToast('OTA configuration saved', 2000, 'bottom', 'right', $scope.toastTargetId);\n                        $scope.activeVal = false;\n                    } else {\n                        $scope.showErrorToast('OTA configuration saved,  but will be sent when device become connected', 'bottom', 'right', $scope.toastTargetId);\n                    }\n                },\n                function fail() {\n                    $scope.showErrorToast('OTA configuration can not be saved', 'bottom', 'right', $scope.toastTargetId);\n                }\n            );\n        }\n    };\n\n    $scope.disableButton = function () {\n        let formValue = $scope.attributeUpdateFormGroup.value;\n        return (formValue.lastTargetFwVer === '' || formValue.lastTargetFwUrl === '');\n    };\n}\n\nself.onDataUpdated = function () {\n};\n\nself.typeParameters = function () {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: true\n    };\n};\n\nself.onDestroy = function () {\n};",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"widgetTitle\": {\n                \"title\": \"Widget title\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"versionKeyName\": {\n                \"title\": \"Version key name\",\n                \"type\": \"string\",\n                \"default\": \"lastTargetFwVer\"\n            },\n            \"serverKeyName\": {\n                \"title\": \"Server URL key name\",\n                \"type\": \"string\",\n                \"default\": \"lastTargetFwUrl\"\n            },\n            \"showLabel\": {\n                \"title\": \"Show label\",\n                \"type\": \"boolean\",\n                \"default\": true\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"widgetTitle\",\n        \"versionKeyName\",\n        \"serverKeyName\",\n        \"showLabel\"\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"ESP32_OTA_widget\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    }
  ]
}