{
  "name": "Uplink Pulse Sensor",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "decoder": "/** Decoder **/\nvar payloadStr = decodeToString(payload);\nvar data = JSON.parse(payloadStr);\nvar KOEF_PULSE=0.01;\nvar deviceName = data.deviceName;\nvar deviceType = 'Water Pulse';\nvar res = _base64ToArrayBuffer(data.data);\nvar dateTime=GetCurrentDateTime();\nvar waterPulseValue1 = GetPulseMeterValue(res[3], res[4], res[5], res[6]);\nvar waterPulseValue2 = GetPulseMeterValue(res[7], res[8], res[9], res[10]);\nvar fraud1=GetFraud(res[2], 1);\nvar fraud2=GetFraud(res[2], 2);\nvar flg_err_pulse1 = GetErrPulse(res[2], 1);\nvar flg_err_pulse2 = GetErrPulse(res[2], 2);\nvar low_bat=GetFlagError(res[0], 1);\nvar motion_detect=GetFlagError(res[0], 2);\nvar magnet_detect=GetFlagError(res[0], 3);\nvar tamper_detect = GetFlagError(res[0], 4);\nvar power_on=GetFlagError(res[0], 5);\nvar power_bat=GetFlagError(res[0], 6);\nvar err_time=GetFlagError(res[0], 7);\nvar cfg_done=GetFlagError(res[0], 8);\n\nvar result = {\n   deviceName: deviceName,\n   deviceType: deviceType,\n   attributes: {\n       integrationName: metadata['integrationName'],\n   },\n   telemetry: {\n       NAME_DEV: \"Water meter Pulse Sensor LoRaWAN 'Smartico P22-LR'\",\n       SN: data.deviceName,\n       REAL_TIME: dateTime,\n       WATER_PULSE_VALUE_1: waterPulseValue1,\n       WATER_PULSE_VALUE_2: waterPulseValue2,\n       FRAUD_1:fraud1,\n       FRAUD_2:fraud2,\n       FLG_ERR_PULSE_1: flg_err_pulse1,\n       FLG_ERR_PULSE_2: flg_err_pulse2,\n       FLG_LOW_BAT: low_bat,\n       FLG_MOTION_DETECT: motion_detect,\n       FLG_MAGNET_DETECT: magnet_detect,\n       FLG_TAMPER_DETECT: tamper_detect,\n       FLG_POWER_ON: power_on,\n       FLG_POWER_BAT: power_bat,\n       FLG_ERR_TIME: err_time,\n       FLG_CFG_DONE: cfg_done\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   var str = decodeToString(payload);\n   var data = JSON.parse(str);\n   return data;\n}\n\nfunction _base64ToArrayBuffer(base64) {\n    var binary_string = atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n    var str=\"\";\n    for (var i = 0; i < len; i++) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes;\n}\n\nfunction GetCurrentDateTime(){\n    var a=new Date();\n    var year = a.getFullYear().toString();\n  var month = (a.getMonth()+1).toString();\n  if(month.length==1) month=\"0\"+month;\n  var date = a.getDate().toString();\n  if(date.length==1) date=\"0\"+date;\n  var hour = a.getHours().toString();;\n  if(hour.length==1) hour=\"0\"+hour;\n  var min = a.getMinutes().toString();;\n  if(min.length==1) min=\"0\"+min;\n  var sec = a.getSeconds().toString();;\n  if(sec.length==1) sec=\"0\"+sec;\n  var time = date + '.' + month + '.' + year + ' ' + hour + ':' + min + ':'+sec;\n  return time;\n}\n\nfunction GetPulseMeterValue(byte1, byte2, byte3, byte4) {\n    var value1 = parseInt(byte1, 10).toString(16);\n    while(value1.length<2){value1='0'+value1;}\n    var value2 = parseInt(byte2, 10).toString(16);\n    while(value2.length<2){value2='0'+value2;}\n    var value3 = parseInt(byte3, 10).toString(16);\n    while(value3.length<2){value3='0'+value3;}\n    var value4 = parseInt(byte4, 10).toString(16);\n    while(value4.length<2){value4='0'+value4;}\n    var value = value1+value2+value3+value4;\n    var res = parseInt(value,16);\n    return res*KOEF_PULSE;\n}\n\nfunction GetFraud(byte1, num) {\n    var value1 = parseInt(byte1, 10).toString(2);\n    while(value1.length<8){value1='0'+value1;}\n    if(num==1)\n    {\n        var res = value1[5]+value1[6]+value1[7];\n        return parseInt(res,2);\n    }\n    if(num==2)\n    {\n        var res1 = value1[2]+value1[3]+value1[4];\n        return parseInt(res1,2);\n    }\n    return null;\n}\n\nfunction GetErrPulse(byte1, num) {\n    var value1 = parseInt(byte1, 10).toString(2);\n    while(value1.length<8){value1='0'+value1;}\n    if(num==1)\n        return parseInt(value1[1],2);\n    if(num==2)\n        return parseInt(value1[0],2);\n    return null;\n}\n\nfunction GetFlagError(byte1, num) { \n    var value = parseInt(byte1, 10).toString(2);\n    while(value.length<8){\n    value='0'+value;}\n    if(num==1)\n        return Number(value[7]);\n    if(num==2)\n        return Number(value[6]);\n    if(num==3)\n        return Number(value[5]);\n    if(num==4)\n        return Number(value[4]);\n    if(num==5)\n        return Number(value[3]);\n    if(num==6)\n        return Number(value[2]);\n    if(num==7)\n        return Number(value[1]);\n    if(num==8)\n        return Number(value[0]);\n    return null;\n}\n\nreturn result;",
    "encoder": null
  },
  "additionalInfo": {
    "description": ""
  }
}