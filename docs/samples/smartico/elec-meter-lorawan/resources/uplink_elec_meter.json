{
  "name": "Uplink Elec meter",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "decoder": "/** Decoder **/\r\nvar payloadStr = decodeToString(payload);\r\nvar data = JSON.parse(payloadStr);\r\nvar deviceName =  data.deviceName;\r\nvar deviceType = 'elecMeter';\r\nvar res = _base64ToArrayBuffer(data.data);\r\nif(res[0]==35)\r\n    return null;\r\nvar dateTime=GetCurrentDateTime();\r\nvar voltage_A=null;\r\nvar voltage_B=null;\r\nvar voltage_C=null;\r\nvar current_A=null;\r\nvar current_B=null;\r\nvar current_C=null;\r\nvar frequency=null;\r\nvar power_full_Summary=null;\r\nvar power_full_A=null;\r\nvar power_full_B=null;\r\nvar power_full_C=null;\r\nvar power_active_Summary=null;\r\nvar power_active_A=null;\r\nvar power_active_B=null;\r\nvar power_active_C=null;\r\nvar power_reactive_Summary=null;\r\nvar power_reactive_A=null;\r\nvar power_reactive_B=null;\r\nvar power_reactive_C=null;\r\nvar energy_active_Summary=null;\r\nvar energy_active_t1=null;\r\nvar energy_active_t2=null;\r\nvar energy_active_t3=null;\r\nvar energy_active_t4=null;\r\nvar energy_active_t5=null;\r\nvar energy_active_t6=null;\r\nvar energy_active_t7=null;\r\nvar energy_active_t8=null;\r\nvar energy_reactive_Summary=null;\r\nvar energy_reactive_t1=null;\r\nvar energy_reactive_t2=null;\r\nvar energy_reactive_t3=null;\r\nvar energy_reactive_t4=null;\r\nvar energy_reactive_t5=null;\r\nvar energy_reactive_t6=null;\r\nvar energy_reactive_t7=null;\r\nvar energy_reactive_t8=null;\r\n\r\nvar k=0;\r\nfor (var i = 0; i < res.length; )\r\n    {\r\n        switch(res[i])\r\n        {\r\n            case 0x40:\r\n                i+=5;\r\n                break;\r\n            case 0x20:\r\n                var phase = GetPhase(res[i+1]);\r\n                if(phase==1)\r\n                voltage_A=GetVoltageValue(res[i+1],res[i+2]);\r\n                if(phase==2)\r\n                voltage_B=GetVoltageValue(res[i+1],res[i+2]);\r\n                if(phase==3)\r\n                voltage_C=GetVoltageValue(res[i+1],res[i+2]);\r\n                i+=3;\r\n               break;\r\n            case 0x21:\r\n                var phase = GetPhase(res[i+1]);\r\n                if(phase==1)\r\n                current_A=GetCurrentValue(res[i+1],res[i+2]);\r\n                if(phase==2)\r\n                current_B=GetCurrentValue(res[i+1],res[i+2]);\r\n                if(phase==3)\r\n                current_C=GetCurrentValue(res[i+1],res[i+2]);\r\n                i+=3;\r\n               break;\r\n            case 0x22:\r\n                frequency=GetFrequency(res[i+1],res[i+2]);\r\n                i+=3;\r\n               break;\r\n            case 0x41:\r\n               var typePower = GetPhase(res[i+1]);\r\n               var phasePower=GetPhasePower(res[i+1]);\r\n               if(typePower==1)\r\n               {\r\n                   if(phasePower==0)\r\n                       power_active_Summary=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==1)\r\n                       power_active_A=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==2)\r\n                       power_active_B=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==3)\r\n                       power_active_C=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n               }\r\n               if(typePower==2)\r\n               {\r\n                   if(phasePower==0)\r\n                       power_reactive_Summary=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==1)\r\n                       power_reactive_A=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==2)\r\n                       power_reactive_B=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==3)\r\n                       power_reactive_C=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n               }\r\n               if(typePower==3)\r\n               {\r\n                   if(phasePower==0)\r\n                      {\r\n                          power_full_Summary=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                      }\r\n                   if(phasePower==1)\r\n                       power_full_A=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==2)\r\n                       power_full_B=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(phasePower==3)\r\n                       power_full_C=GetPowerValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n               }\r\n                i+=5;\r\n               break;\r\n            case 0x42:\r\n               var typeEnergy = GetEnergy(res[i+1]);\r\n               var tariff=GetTariff(res[i+1]);\r\n               if(typeEnergy==0)\r\n               {\r\n                   if(tariff==0)\r\n                       energy_active_Summary=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==1)\r\n                       energy_active_t1=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==2)\r\n                       energy_active_t2=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==3)\r\n                       energy_active_t3=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==4)\r\n                       energy_active_t4=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==5)\r\n                       energy_active_t5=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==6)\r\n                       energy_active_t6=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==7)\r\n                       energy_active_t7=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==8)\r\n                       energy_active_t8=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n               }\r\n               if(typeEnergy==1)\r\n               {\r\n                   if(tariff==0)\r\n                       energy_reactive_Summary=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==1)\r\n                       energy_reactive_t1=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==2)\r\n                       energy_reactive_t2=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==3)\r\n                       energy_reactive_t3=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==4)\r\n                       energy_reactive_t4=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==5)\r\n                       energy_reactive_t5=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==6)\r\n                       energy_reactive_t6=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==7)\r\n                       energy_reactive_t7=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n                   if(tariff==8)\r\n                       energy_reactive_t8=GetEnergyValue(res[i+1], res[i+2], res[i+3], res[i+4]);\r\n               }\r\n               \r\n                i+=5;\r\n               break;   \r\n            default:\r\n                 k=1;\r\n               break;\r\n        }\r\n        if(k==1)\r\n        break;\r\n    }\r\n\r\nvar result = {\r\n   deviceName: deviceName,\r\n   deviceType: deviceType,\r\n   attributes: {\r\n       integrationName: metadata['integrationName'],\r\n   },\r\n   telemetry: {\r\n       REAL_TIME: dateTime,\r\n       SN: data.deviceName,\r\n       deviceTypeTelemetry: \"Smartico E307\",\r\n       NAME_DEV: \"Electricity Meter 'Smartico E307'\",\r\n       VOLTAGE_A: voltage_A,\r\n       VOLTAGE_B: voltage_B,\r\n       VOLTAGE_C: voltage_C,\r\n       CURRENT_A: current_A,\r\n       CURRENT_B: current_B,\r\n       CURRENT_C: current_C,\r\n       FREQUENCY: frequency,\r\n       POWER_FULL_SUMMARY: power_full_Summary,\r\n       POWER_FULL_A: power_full_A,\r\n       POWER_FULL_B: power_full_B,\r\n       POWER_FULL_C: power_full_C,\r\n       POWER_ACTIVE_SUMMARY: power_active_Summary,\r\n       POWER_ACTIVE_A: power_active_A,\r\n       POWER_ACTIVE_B: power_active_B,\r\n       POWER_ACTIVE_C: power_active_C,\r\n       POWER_REACTIVE_SUMMARY: power_reactive_Summary,\r\n       POWER_REACTIVE_A: power_reactive_A,\r\n       POWER_REACTIVE_B: power_reactive_B,\r\n       POWER_REACTIVE_C: power_reactive_C,\r\n       \r\n       VALUE: energy_active_Summary,\r\n       ENERGY_ACTIVE_SUMMARY: energy_active_Summary,\r\n       ENERGY_ACTIVE_T1: energy_active_t1,\r\n       ENERGY_ACTIVE_T2: energy_active_t2,\r\n       ENERGY_ACTIVE_T3: energy_active_t3,\r\n       ENERGY_ACTIVE_T4: energy_active_t4,\r\n       ENERGY_ACTIVE_T5: energy_active_t5,\r\n       ENERGY_ACTIVE_T6: energy_active_t6,\r\n       ENERGY_ACTIVE_T7: energy_active_t7,\r\n       ENERGY_ACTIVE_T8: energy_active_t8,\r\n       ENERGY_REACTIVE_SUMMARY: energy_reactive_Summary,\r\n       ENERGY_REACTIVE_T1: energy_reactive_t1,\r\n       ENERGY_REACTIVE_T2: energy_reactive_t2,\r\n       ENERGY_REACTIVE_T3: energy_reactive_t3,\r\n       ENERGY_REACTIVE_T4: energy_reactive_t4,\r\n       ENERGY_REACTIVE_T5: energy_reactive_t5,\r\n       ENERGY_REACTIVE_T6: energy_reactive_t6,\r\n       ENERGY_REACTIVE_T7: energy_reactive_t7,\r\n       ENERGY_REACTIVE_T8: energy_reactive_t8,\r\n   }\r\n};\r\n\r\n/** Helper functions **/\r\n\r\nfunction decodeToString(payload) {\r\n   return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n   var str = decodeToString(payload);\r\n   var data = JSON.parse(str);\r\n   return data;\r\n}\r\n\r\nfunction _base64ToArrayBuffer(base64) {\r\n    var binary_string = atob(base64);\r\n    var len = binary_string.length;\r\n    var bytes = new Uint8Array(len);\r\n    var str=\"\";\r\n    for (var i = 0; i < len; i++) {\r\n        bytes[i] = binary_string.charCodeAt(i);\r\n    }\r\n    return bytes;\r\n}\r\n\r\nfunction GetCurrentDateTime(){\r\n  var a=new Date();\r\n  var year = a.getFullYear().toString();\r\n  var month = (a.getMonth()+1).toString();\r\n  if(month.length==1) month=\"0\"+month;\r\n  var date = a.getDate().toString();\r\n  if(date.length==1) date=\"0\"+date;\r\n  var hour = a.getHours().toString();;\r\n  if(hour.length==1) hour=\"0\"+hour;\r\n  var min = a.getMinutes().toString();;\r\n  if(min.length==1) min=\"0\"+min;\r\n  var sec = a.getSeconds().toString();;\r\n  if(sec.length==1) sec=\"0\"+sec;\r\n  var time = date + '.' + month + '.' + year + ' ' + hour + ':' + min + ':' + sec ;\r\n  return time;\r\n}\r\n\r\nfunction GetPowerValue(byte1, byte2, byte3, byte4) {\r\n    var value1 = byte1.toString(2)\r\n    while(value1.length<8){\r\n    value1='0'+value1;}\r\n    var value2 = byte2.toString(2);\r\n    while(value2.length<8){\r\n    value2='0'+value2;}\r\n    var value3 = byte3.toString(2)\r\n    while(value3.length<8){\r\n    value3='0'+value3;}\r\n    var value4 = byte4.toString(2);\r\n    while(value4.length<8){\r\n    value4='0'+value4;}\r\n    var value = value1[4]+value1[5]+value1[6]+value1[7] + value2+value3+value4;\r\n    return parseInt(value,2)/100;\r\n}\r\n\r\nfunction SimulatePower(persent) {\r\n    return parseInt(value,2)/100;\r\n}\r\n\r\nfunction GetEnergyValue(byte1, byte2, byte3, byte4) {\r\n    var value1 = byte1.toString(2)\r\n    while(value1.length<8){\r\n    value1='0'+value1;}\r\n    var value2 = byte2.toString(2);\r\n    while(value2.length<8){\r\n    value2='0'+value2;}\r\n    var value3 = byte3.toString(2)\r\n    while(value3.length<8){\r\n    value3='0'+value3;}\r\n    var value4 = byte4.toString(2);\r\n    while(value4.length<8){\r\n    value4='0'+value4;}\r\n    var value = value1[5]+value1[6]+value1[7] + value2+value3+value4;\r\n    return parseInt(value,2)/100;\r\n}\r\n\r\nfunction GetFrequency(byte1, byte2) {\r\n    var value1 = byte1.toString(2)\r\n    while(value1.length<8){\r\n    value1='0'+value1;}\r\n    var value2 = byte2.toString(2);\r\n    while(value2.length<8){\r\n    value2='0'+value2;}\r\n    var value = value1 + value2;\r\n    \r\n    return parseInt(value,2)/1000;\r\n}\r\n\r\nfunction GetVoltageValue(byte1, byte2) {\r\n    var value1 = byte1.toString(2)\r\n    while(value1.length<8){\r\n    value1='0'+value1;}\r\n    var value2 = byte2.toString(2);\r\n    while(value2.length<8){\r\n    value2='0'+value2;}\r\n    var value = value1[2]+value1[3]+value1[4]+value1[5]+value1[6]+value1[7] + value2;\r\n    \r\n    return parseInt(value,2)/10;\r\n}\r\n\r\nfunction GetCurrentValue(byte1, byte2) {\r\n    var value1 = byte1.toString(2)\r\n    while(value1.length<8){\r\n    value1='0'+value1;}\r\n    var value2 = byte2.toString(2);\r\n    while(value2.length<8){\r\n    value2='0'+value2;}\r\n    var value = value1[3]+value1[4]+value1[5]+value1[6]+value1[7] + value2;\r\n    if(parseInt(value1[2],2) == 0)\r\n        return parseInt(value,2)/100;\r\n    else\r\n        return parseInt(value,2)/10;\r\n}\r\n\r\nfunction GetPhase(mainByte)\r\n{\r\n    var phase = mainByte.toString(2);\r\n    while(phase.length<8){\r\n    phase='0'+phase;}\r\n    phase=phase[0].toString(2)+phase[1].toString(2);\r\n    return parseInt(phase,2);\r\n}\r\n\r\nfunction GetEnergy(mainByte)\r\n{\r\n    var phase = mainByte.toString(2);\r\n    while(phase.length<8){\r\n    phase='0'+phase;}\r\n    phase=phase[0].toString(2);\r\n    return parseInt(phase,2);\r\n}\r\n\r\nfunction GetPhasePower(mainByte)\r\n{\r\n    var phase = mainByte.toString(2);\r\n    while(phase.length<8){\r\n    phase='0'+phase;}\r\n    phase=phase[2].toString(2)+phase[3].toString(2);\r\n    return parseInt(phase,2);\r\n}\r\n\r\nfunction GetTariff(mainByte)\r\n{\r\n    var tariff = mainByte.toString(2);\r\n    while(tariff.length<8){\r\n    tariff='0'+tariff;}\r\n    tariff=tariff[1].toString(2)+tariff[2].toString(2)+tariff[3].toString(2)+tariff[4].toString(2);\r\n    return parseInt(tariff,2);\r\n}\r\n\r\nreturn result;",
    "encoder": null
  },
  "additionalInfo": {
    "description": ""
  }
}