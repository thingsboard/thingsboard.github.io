{
  "name": "Uplink Gas meter",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "decoder": "/** Decoder **/\r\nvar payloadStr = decodeToString(payload);\r\nvar data = JSON.parse(payloadStr);\r\nvar deviceName =  data.deviceName;\r\nvar deviceType = 'Gas Meter';\r\nvar dateTime=GetCurrentDateTime();\r\nvar res1 = _base64ToArrayBuffer(data.data);\r\nvar gasValue = GetGasMeterValue(res1);\r\nvar temp = GetTempValue(res1);\r\n\r\nvar flg_low_bat = FLG_LOW_BAT(res1);\r\nvar flg_motion_detect = FLG_MOTION_DETECT(res1);\r\nvar flg_magnet_detect = FLG_MAGNET_DETECT(res1);\r\nvar flg_tamper_detect = FLG_TAMPER_DETECT(res1);\r\nvar sts_valve = STS_VALVE(res1);\r\nvar flg_err_ovr = FLG_ERR_OVR(res1);\r\nvar flg_err_reverse = FLG_ERR_REVERSE(res1);\r\nvar flg_err_sensor = FLG_ERR_SENSOR(res1);\r\nvar flg_err_gas = FLG_ERR_GAS(res1);\r\nvar flg_power_on = FLG_POWER_ON(res1);\r\nvar flg_err_time = FLG_ERR_TIME(res1);\r\nvar flg_lock = FLG_LOCK(res1);\r\nvar flg_cfg_done = FLG_CFG_DONE(res1);\r\n\r\nvar result = {\r\n   deviceName: deviceName,\r\n   deviceType: deviceType,\r\n   attributes: {\r\n       integrationName: metadata['integrationName'],\r\n   },\r\n   telemetry: {\r\n       gasMeter: gasValue,\r\n       temperature: temp,\r\n       REAL_TIME: dateTime,\r\n       SN: data.deviceName,\r\n       FLG_LOW_BAT: flg_low_bat,\r\n       FLG_MOTION_DETECT: flg_motion_detect,\r\n       FLG_MAGNET_DETECT: flg_magnet_detect,\r\n       FLG_TAMPER_DETECT: flg_tamper_detect,\r\n       STS_VALVE: sts_valve,\r\n       FLG_ERR_OVR: flg_err_ovr,\r\n       FLG_ERR_REVERSE: flg_err_reverse,\r\n       FLG_ERR_SENSOR: flg_err_sensor,\r\n       FLG_ERR_GAS: flg_err_gas,\r\n       FLG_ERR_TIME: flg_err_time,\r\n       FLG_POWER_ON: flg_power_on,\r\n       FLG_LOCK: flg_lock,\r\n       FLG_CFG_DONE: flg_cfg_done\r\n   }\r\n};\r\n\r\n/** Helper functions **/\r\n\r\nfunction decodeToString(payload) {\r\n   return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n   var str = decodeToString(payload);\r\n   var data = JSON.parse(str);\r\n   return data;\r\n}\r\n\r\nfunction GetCurrentDateTime(){\r\n    var a=new Date();\r\n    var year = a.getFullYear().toString();\r\n  var month = (a.getMonth()+1).toString();\r\n  if(month.length==1) month=\"0\"+month;\r\n  var date = a.getDate().toString();\r\n  if(date.length==1) date=\"0\"+date;\r\n  var hour = a.getHours().toString();\r\n  if(hour.length==1) hour=\"0\"+hour;\r\n  var min = a.getMinutes().toString();\r\n  if(min.length==1) min=\"0\"+min;\r\n  var sec = a.getSeconds().toString();\r\n  if(sec.length==1) sec=\"0\"+sec;\r\n  var time = date + '.' + month + '.' + year + ' ' + hour + ':' + min + ':' + sec ;\r\n  return time;\r\n}\r\n\r\nfunction _base64ToArrayBuffer(base64) {\r\n    var binary_string = atob(base64);\r\n    var len = binary_string.length;\r\n    var bytes = new Uint8Array(len);\r\n    var str=\"\";\r\n    for (var i = 0; i < len; i++) {\r\n        bytes[i] = binary_string.charCodeAt(i);\r\n    }\r\n    return bytes;\r\n}\r\n\r\nfunction GetGasMeterValue(arr) {\r\n    var bytes = arr;\r\n    var value = 0;\r\n    for (var j = 7; j < 11; j++) {\r\n    value = (value << 8) | bytes[j];}\r\n    return value/1000;\r\n}\r\n\r\nfunction GetTempValue(arr) {\r\n    var bytes = arr;\r\n    var value = \"0\";\r\n    var value1 = parseInt(bytes[11],10).toString(16);\r\n    if(value1.length==1) value1=\"0\"+value1;\r\n    var value2 = parseInt(bytes[12],10).toString(16);\r\n    if(value2.length==1) value2=\"0\"+value2;\r\n    value=value1+value2;\r\n    if(value.toLowerCase()==\"ffff\")\r\n         return null;\r\n    value = parseInt(value, 16).toString(10);\r\n    value = (value << 16)>>16;\r\n    return value/100;\r\n}\r\n\r\nfunction FLG_LOW_BAT(arr) {\r\n    var value = parseInt(arr[2], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[7]);\r\n}\r\n\r\nfunction FLG_MOTION_DETECT(arr) {\r\n    var value = parseInt(arr[2], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[6]);\r\n}\r\n\r\nfunction FLG_MAGNET_DETECT(arr) {\r\n    var value = parseInt(arr[2], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[5]);\r\n}\r\n\r\nfunction FLG_TAMPER_DETECT(arr) {\r\n    var value = parseInt(arr[2], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[4]);\r\n}\r\n\r\nfunction STS_VALVE(arr) {\r\n    var value = parseInt(arr[2], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    var str = value[1]+value[2]+value[3];\r\n    var res = parseInt(str, 2).toString(10);\r\n    return Number(res);\r\n}\r\n\r\nfunction FLG_ERR_OVR(arr) {\r\n    var value = parseInt(arr[2], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[0]);\r\n}\r\n\r\nfunction FLG_ERR_REVERSE(arr) {\r\n    var value = parseInt(arr[1], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[7]);\r\n}\r\n\r\nfunction FLG_ERR_SENSOR(arr) {\r\n    var value = parseInt(arr[1], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[6]);\r\n}\r\n\r\nfunction FLG_ERR_GAS(arr) {\r\n    var value = parseInt(arr[1], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[5]);\r\n}\r\n\r\nfunction FLG_ERR_TIME(arr) {\r\n    var value = parseInt(arr[1], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[4]);\r\n}\r\n\r\nfunction FLG_POWER_ON(arr) {\r\n    var value = parseInt(arr[1], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[2]);\r\n}\r\n\r\nfunction FLG_LOCK(arr) {\r\n    var value = parseInt(arr[1], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[1]);\r\n}\r\n\r\nfunction FLG_CFG_DONE(arr) {\r\n    var value = parseInt(arr[1], 10).toString(2);\r\n    while(value.length<8){\r\n    value='0'+value;}\r\n    return Number(value[0]);\r\n}\r\nreturn result;",
    "encoder": null
  },
  "additionalInfo": {
    "description": ""
  }
}