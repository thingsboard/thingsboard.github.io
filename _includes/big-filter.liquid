{% assign filterCollection = page.filterCollection %}

<div class="big-filter">
    {% for item in filterCollection %}
        <div class="big-filter-section{% if forloop.index0 == 0 %} opened{% endif %}">
            <div class="big-filter-section-label">
                <span class="big-filter-section-label-title">{{ item[1].label }}</span>
                <span class="big-filter-section-label-chevron">
                    <i class="fas fa-chevron-down fa-lg" style="color: #2A7DEC"></i>
                </span>
            </div>
            <div class="big-filter-section-filters">
                <ul class="big-filter-section-list">
                    {% for filter in item[1].filters %}
                        <li class="big-filter-section-filter">
                            <input type="checkbox" id="{{ filter[1] }}" value="{{ filter[1] }}">
                            <label for="{{ filter[1] }}">{{ filter[1] }}</label>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    {% endfor %}
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const checkboxes = document.querySelectorAll('.big-filter-section-filter input[type="checkbox"]');
        const cards = document.querySelectorAll('.card');
        const filterSectionLabels = document.querySelectorAll('.big-filter-section-label');
        const crispsContainer = document.querySelector('.search-crisps');
        const clearAllBtn = document.querySelector('.search-crisps-clear-btn');
        const toggleBtn = document.querySelector('.search-crisps-toggle-btn');
        const toggleLabel = toggleBtn.querySelector('.toggle-label');
        const toggleIcon = toggleBtn.querySelector('i');

        let isCollapsed = false;

        function applyFilter() {
            const selectedFilters = Array.from(checkboxes)
                .filter(cb => cb.checked)
                .map(cb => cb.value);

            cards.forEach(card => {
                const cardTypes = card.id.toLowerCase().split('|');
                const match = selectedFilters.length === 0 || cardTypes.some(type => selectedFilters.includes(type.toLowerCase()));
                card.style.display = match ? 'block' : 'none';
            });

            updateCrisps(selectedFilters);
        }

        function updateCrisps(selectedFilters) {
            if (!crispsContainer) return;

            crispsContainer.querySelectorAll('.crisp').forEach(el => el.remove());

            if (clearAllBtn) {
                clearAllBtn.style.display = selectedFilters.length > 0 ? 'inline-block' : 'none';
            }

            selectedFilters.forEach(filter => {
                const crisp = document.createElement('span');
                crisp.className = 'crisp';
                crisp.textContent = filter;

                const close = document.createElement('span');
                close.textContent = 'Ã—';
                close.className = 'crisp-close';
                crisp.appendChild(close);

                close.addEventListener('click', () => {
                    const checkbox = Array.from(checkboxes).find(cb => cb.value === filter);
                    if (checkbox) {
                        checkbox.checked = false;
                        applyFilter();
                    }
                });

                crispsContainer.insertBefore(crisp, clearAllBtn);
            });

            setTimeout(checkIfMultiline, 0);
        }

        function checkIfMultiline() {
            const crisps = crispsContainer.querySelectorAll('.crisp');
            if (crisps.length <= 3) {
                toggleBtn.style.display = 'none';
                return;
            }

            const firstTop = crisps[0]?.offsetTop;
            let multiline = false;
            for (let i = 1; i < crisps.length; i++) {
                if (crisps[i].offsetTop > firstTop) {
                    multiline = true;
                    break;
                }
            }

            if (multiline) {
                toggleBtn.style.display = 'inline-block';
                toggleLabel.textContent = 'Hide';
                toggleIcon.style.transform = 'rotate(0deg) translateY(-50%)';
                isCollapsed = false;
            } else {
                toggleBtn.style.display = 'none';
            }
        }

        function collapseCrisps() {
            const crisps = crispsContainer.querySelectorAll('.crisp');
            crisps.forEach((crisp, index) => {
                crisp.classList.toggle('hidden', index >= 3);
            });
            toggleLabel.textContent = 'Show';
            toggleIcon.style.transform = 'rotate(180deg) translateY(50%)';
            isCollapsed = true;
        }

        function expandCrisps() {
            crispsContainer.querySelectorAll('.crisp').forEach(crisp => {
                crisp.classList.remove('hidden');
            });
            toggleLabel.textContent = 'Hide';
            toggleIcon.style.transform = 'rotate(0deg) translateY(-50%)';
            isCollapsed = false;
        }

        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => {
                if (isCollapsed) {
                    expandCrisps();
                } else {
                    collapseCrisps();
                }
            });
        }

        if (clearAllBtn) {
            clearAllBtn.addEventListener('click', () => {
                checkboxes.forEach(cb => cb.checked = false);
                applyFilter();
            });
        }

        checkboxes.forEach(cb => {
            cb.addEventListener('change', applyFilter);
        });

        filterSectionLabels.forEach(label => {
            label.addEventListener('click', function () {
                const section = label.closest('.big-filter-section');
                section.classList.toggle('opened');
            });
        });

        applyFilter();
    });
</script>


